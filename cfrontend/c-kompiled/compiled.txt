module ARRAY-SYNTAX [org.kframework.attributes.Location(Location(72,1,135,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports LIST
  syntax KItem ::= Array "[" Int "]" [function, hook(ARRAY.lookup)]
  syntax KItem ::= Array
  syntax K
  syntax Bool ::= Int "in_keys" "(" Array ")" [function, functional, hook(ARRAY.in_keys)]
  syntax Bool ::= "isArray" "(" K ")" [function, predicate(Array)]
  syntax Array [element(_[_<-_]), hook(ARRAY.Array), org.kframework.attributes.Location(Location(75,3,75,69)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), unit(arrayCtor)]
  syntax Array ::= Array "[" Int "<-" KItem "]" [function, hook(ARRAY.update), klabel(_[_<-_]), symbol]
  syntax Array ::= Array "[" Int "<-" "undef" "]" [function, hook(ARRAY.remove)]
  syntax Array ::= "updateArray" "(" Array "," Int "," List ")" [function, hook(ARRAY.updateAll), klabel(updateArray)]
  syntax Array ::= "project:Array" "(" K ")" [function, projection]
  syntax Array ::= "fillArray" "(" Array "," Int "," Int "," KItem ")" [function, hook(ARRAY.fill), klabel(fillArray)]
  rule `project:Array`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module AUTO-CASTS [org.kframework.attributes.Location(Location(373,1,381,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module AUTO-FOLLOW [org.kframework.attributes.Location(Location(383,1,394,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module BASIC-K [org.kframework.attributes.Location(Location(35,1,41,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-BOOL
  imports ML-SYNTAX
  syntax KItem [hook(K.KItem), org.kframework.attributes.Location(Location(38,3,38,30)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KConfigVar [org.kframework.attributes.Location(Location(40,3,40,27)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md)), token]
  syntax K ::= KItem
  syntax K
  syntax Bool ::= "isKConfigVar" "(" K ")" [function, predicate(KConfigVar)]
endmodule


module BOOL [not-lr1, org.kframework.attributes.Location(Location(795,1,869,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BOOL-SYNTAX
  imports BASIC-K
  syntax priority notBool_ > _orElseBool_ _orBool_ _andThenBool_ _impliesBool_ _andBool_ _xorBool_ > _==Bool_ _=/=Bool_
  syntax associativity left _xorBool_
  syntax associativity left _orElseBool_
  syntax associativity left _orBool_
  syntax associativity left _impliesBool_
  syntax associativity left _andThenBool_
  syntax associativity left _andBool_
  syntax associativity left _==Bool_ _=/=Bool_
  syntax associativity left _==Bool_
  syntax associativity left _=/=Bool_
  syntax Bool ::= Bool "xorBool" Bool [boolOperation, function, functional, hook(BOOL.xor), klabel(_xorBool_), left, smt-hook(xor), symbol]
  syntax Bool ::= Bool "orElseBool" Bool [boolOperation, function, functional, hook(BOOL.orElse), klabel(_orElseBool_), left, smt-hook(or), symbol]
  syntax Bool ::= Bool "orBool" Bool [boolOperation, function, functional, hook(BOOL.or), klabel(_orBool_), latex({#1}\vee_{\scriptstyle\it Bool}{#2}), left, smt-hook(or), symbol]
  syntax Bool ::= Bool "impliesBool" Bool [boolOperation, function, functional, hook(BOOL.implies), klabel(_impliesBool_), left, smt-hook(=>), symbol]
  syntax Bool ::= Bool "andThenBool" Bool [boolOperation, function, functional, hook(BOOL.andThen), klabel(_andThenBool_), left, smt-hook(and), symbol]
  syntax Bool ::= Bool "andBool" Bool [boolOperation, function, functional, hook(BOOL.and), klabel(_andBool_), latex({#1}\wedge_{\scriptstyle\it Bool}{#2}), left, smt-hook(and), symbol]
  syntax Bool ::= Bool "==Bool" Bool [function, functional, hook(BOOL.eq), klabel(_==Bool_), left, smt-hook(=), symbol]
  syntax Bool ::= Bool "=/=Bool" Bool [function, functional, hook(BOOL.ne), klabel(_=/=Bool_), left, smt-hook(distinct), symbol]
  syntax Bool ::= "notBool" Bool [boolOperation, function, functional, hook(BOOL.not), klabel(notBool_), latex(\neg_{\scriptstyle\it Bool}{#1}), smt-hook(not), symbol]
  rule `notBool_`(#token("true","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(53fc758ece1ff16581673016dfacc556cc30fcf6b3c35b586f001d76a1f9336c), contentStartColumn(8), contentStartLine(836), org.kframework.attributes.Location(Location(836,8,836,29)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `notBool_`(#token("false","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(17ebc68421572b8ebe609c068fb49cbb6cbbe3246e2142257ad8befdda38f415), contentStartColumn(8), contentStartLine(837), org.kframework.attributes.Location(Location(837,8,837,29)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(B,B)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9a6d91cd75cd777b0d4db536b3e4b20578e74fe650e644b55294da95fd2dba7f), contentStartColumn(8), contentStartLine(851), org.kframework.attributes.Location(Location(851,8,851,38)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7a2851f9d4ea4bd3f35070ee029fc3bdca36e361f7ee54addeff9d10ddeb7c75), contentStartColumn(8), contentStartLine(850), org.kframework.attributes.Location(Location(850,8,850,38)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_xorBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(73513655c09a595907ab9d26d67e27f01d14a3435743b77000c02d10f35c05bf), contentStartColumn(8), contentStartLine(849), org.kframework.attributes.Location(Location(849,8,849,38)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c9eccff94ecf6e810c600d4536bf1701485c13c3456c6b98c0cdab0fe7c5af14), contentStartColumn(8), contentStartLine(859), org.kframework.attributes.Location(Location(859,8,859,33)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(K,#token("false","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(684b0444a1f711d49ff1502423a3346fb26958697423db488b05d25081fc0480), contentStartColumn(8), contentStartLine(861), org.kframework.attributes.Location(Location(861,8,861,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#token("true","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(354bd0860c7f38b59e285c935fd2ea553ebddbabb4973342ad25f0dac6ea7bf6), contentStartColumn(8), contentStartLine(858), org.kframework.attributes.Location(Location(858,8,858,33)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orElseBool_`(#token("false","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(eb8c85dac19a5951f694b65269c2b17c80d6d126d6a367958e4a5d736a880ecf), contentStartColumn(8), contentStartLine(860), org.kframework.attributes.Location(Location(860,8,860,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(47860d52c18a441b229449cd89d5464256137dc32deb5551effbac0482c883f3), contentStartColumn(8), contentStartLine(854), org.kframework.attributes.Location(Location(854,8,854,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(B,#token("false","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(d7245713da157cf997438091f92bb78eb51a6cefa568bb0d30560ce08d647f26), contentStartColumn(8), contentStartLine(856), org.kframework.attributes.Location(Location(856,8,856,32)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#token("true","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(71744528cdad83bc729990d3af3b544d27b09630b2615ca707dd2fc6ec93e7c2), contentStartColumn(8), contentStartLine(853), org.kframework.attributes.Location(Location(853,8,853,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_orBool_`(#token("false","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(991a3290bc7b6dca75d676a72a848ec6b2bd2827fb0e9626252aa1507394ca1b), contentStartColumn(8), contentStartLine(855), org.kframework.attributes.Location(Location(855,8,855,32)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(_0,#token("true","Bool"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(99ba64afc26a739953df142ccd4b486bba68107fce8c9aa356d40afa7a988712), contentStartColumn(8), contentStartLine(865), org.kframework.attributes.Location(Location(865,8,865,39)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(B,#token("false","Bool"))=>`notBool_`(B) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(022c562a21d72cedfb795607d2249b8ad14b66399b720b3b2f4a05a1da08df96), contentStartColumn(8), contentStartLine(866), org.kframework.attributes.Location(Location(866,8,866,45)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(da818c43c21c5fb2cced7e02a74b6b4191d323de2967a671b961ad28550f3c7d), contentStartColumn(8), contentStartLine(863), org.kframework.attributes.Location(Location(863,8,863,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_impliesBool_`(#token("false","Bool"),_0)=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(55bb5c83c9563c712537b95401c0a5c88255fd7cdbd18b2d4358c54aee80660e), contentStartColumn(8), contentStartLine(864), org.kframework.attributes.Location(Location(864,8,864,40)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(_0,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(0508592878b546cbc6eeda6ec7b322584eea5c6d6eea3f72be8418fe4f7149b2), contentStartColumn(8), contentStartLine(847), org.kframework.attributes.Location(Location(847,8,847,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(K,#token("true","Bool"))=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(82ac30b094be9b12206773d87b60274e929a41ca595f4674be1d37eeff873d7c), contentStartColumn(8), contentStartLine(845), org.kframework.attributes.Location(Location(845,8,845,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#token("true","Bool"),K)=>K requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(78a3191cbbdec57b0f411f41291076c8124bb0d9b6b57905674b2c6858d78689), contentStartColumn(8), contentStartLine(844), org.kframework.attributes.Location(Location(844,8,844,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andThenBool_`(#token("false","Bool"),_0)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b729746be7bf2183d9eff138d97078a7c9489def6d8b2e1495c41ce3954997d), contentStartColumn(8), contentStartLine(846), org.kframework.attributes.Location(Location(846,8,846,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(_0,#token("false","Bool"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9c183fae7de06f560180386d14d29c609cadf0c98266ce2adbecb50100a1daca), contentStartColumn(8), contentStartLine(842), org.kframework.attributes.Location(Location(842,8,842,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(B,#token("true","Bool"))=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e8d4ca75a690151f99f8904b068db555782f5599b11230a9d0b97a71afb6fc98), contentStartColumn(8), contentStartLine(840), org.kframework.attributes.Location(Location(840,8,840,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#token("true","Bool"),B)=>B requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5b9db8dba12010819161cc42dadccd0adf0100a47c21f884ae66c0a3d5483a1f), contentStartColumn(8), contentStartLine(839), org.kframework.attributes.Location(Location(839,8,839,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_andBool_`(#token("false","Bool"),_0)=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(61fbef33b3611f1cc2aaf3b5e8ddec4a0f434c557278c38461c65c8722743497), contentStartColumn(8), contentStartLine(841), org.kframework.attributes.Location(Location(841,8,841,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_=/=Bool_`(B1,B2)=>`notBool_`(`_==Bool_`(B1,B2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(31fe72efcfddcd8588a11d9d10c1b1a9f96ae3da46b647d4cb9d1e8b1bd1654f), contentStartColumn(8), contentStartLine(868), org.kframework.attributes.Location(Location(868,8,868,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module BOOL-SYNTAX [org.kframework.attributes.Location(Location(789,1,793,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SORT-BOOL
  syntax K
  syntax Bool ::= "true" [token]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "false" [token]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "is#UpperId" "(" K ")" [function, predicate(#UpperId)]
  syntax Bool ::= "is#LowerId" "(" K ")" [function, predicate(#LowerId)]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "is#UpperId" "(" K ")" [function, predicate(#UpperId)]
  syntax Bool ::= "is#LowerId" "(" K ")" [function, predicate(#LowerId)]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BUILTIN-ID-TOKENS [org.kframework.attributes.Location(Location(62,1,65,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#UpperId" "(" K ")" [function, predicate(#UpperId)]
  syntax Bool ::= "is#LowerId" "(" K ")" [function, predicate(#LowerId)]
  syntax #UpperId ::= r"[A-Z][a-zA-Z0-9]*" [prec(2), token]
  syntax #LowerId ::= r"[a-z][a-zA-Z0-9]*" [prec(2), token]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module BYTES-CONCRETE [concrete, org.kframework.attributes.Location(Location(1916,1,1918,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BYTES-HOOKED
endmodule


module BYTES-HOOKED [org.kframework.attributes.Location(Location(1664,1,1824,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX
  syntax associativity right _+Bytes__BYTES-HOOKED_Bytes_Bytes_Bytes
  syntax String ::= "Bytes2String" "(" Bytes ")" [function, functional, hook(BYTES.bytes2string), klabel(Bytes2String)]
  syntax Signedness ::= "project:Signedness" "(" K ")" [function, projection]
  syntax Signedness ::= "Unsigned" [klabel(unsignedBytes), symbol]
  syntax Signedness ::= "Signed" [klabel(signedBytes), symbol]
  syntax KItem ::= Signedness
  syntax KItem ::= Int
  syntax KItem ::= Endianness
  syntax KItem ::= Bytes
  syntax K
  syntax Int ::= Bytes "[" Int "]" [function, hook(BYTES.get)]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Int ::= "lengthBytes" "(" Bytes ")" [function, functional, hook(BYTES.length), klabel(lengthBytes), smtlib(lengthBytes)]
  syntax Int ::= "Bytes2Int" "(" Bytes "," Endianness "," Signedness ")" [function, functional, hook(BYTES.bytes2int), klabel(Bytes2Int)]
  syntax Endianness ::= "project:Endianness" "(" K ")" [function, projection]
  syntax Endianness ::= "LE" [klabel(littleEndianBytes), symbol]
  syntax Endianness ::= "BE" [klabel(bigEndianBytes), symbol]
  syntax Bytes [hook(BYTES.Bytes), org.kframework.attributes.Location(Location(1667,3,1667,41)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Bytes ::= Bytes "[" Int "<-" Int "]" [function, hook(BYTES.update)]
  syntax Bytes ::= Bytes "+Bytes" Bytes [function, functional, hook(BYTES.concat), right]
  syntax Bytes ::= "substrBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.substr), klabel(substrBytes)]
  syntax Bytes ::= "reverseBytes" "(" Bytes ")" [function, functional, hook(BYTES.reverse), klabel(reverseBytes)]
  syntax Bytes ::= "replaceAtBytes" "(" Bytes "," Int "," Bytes ")" [function, hook(BYTES.replaceAt), klabel(replaceAtBytes)]
  syntax Bytes ::= "project:Bytes" "(" K ")" [function, projection]
  syntax Bytes ::= "padRightBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padRight), klabel(padRightBytes)]
  syntax Bytes ::= "padLeftBytes" "(" Bytes "," Int "," Int ")" [function, hook(BYTES.padLeft), klabel(padLeftBytes)]
  syntax Bytes ::= "String2Bytes" "(" String ")" [function, functional, hook(BYTES.string2bytes), klabel(String2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Int "," Endianness ")" [function, functional, hook(BYTES.int2bytes), klabel(Int2Bytes)]
  syntax Bytes ::= "Int2Bytes" "(" Int "," Endianness "," Signedness ")" [function, functional, klabel(Int2BytesNoLen)]
  syntax Bytes ::= ".Bytes" [function, functional, hook(BYTES.empty)]
  syntax Bool ::= "isSignedness" "(" K ")" [function, predicate(Signedness)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  syntax Bool ::= "isEndianness" "(" K ")" [function, predicate(Endianness)]
  syntax Bool ::= "isBytes" "(" K ")" [function, predicate(Bytes)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:Signedness`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Endianness`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bytes`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module C [org.kframework.attributes.Location(Location(3,1,14,9)), org.kframework.attributes.Source(Source(/home/alessio/Project/osl/cfrontend/./c.k))]
  imports MAP
  imports DOMAINS
  imports C-SYNTAX
  syntax TCellOpt ::= TCell
  syntax TCellOpt ::= "project:TCellOpt" "(" K ")" [function, projection]
  syntax TCellOpt ::= "noTCell" [cellOptAbsent(TCell)]
  syntax TCellFragment ::= "project:TCellFragment" "(" K ")" [function, projection]
  syntax TCellFragment ::= "<T>-fragment" KCellOpt OslCellOpt "</T>-fragment" [cellFragment(TCell)]
  syntax TCell ::= "project:TCell" "(" K ")" [function, projection]
  syntax TCell ::= "initTCell" "(" Map ")" [function, initializer, noThread]
  syntax TCell ::= "<T>" KCell OslCell "</T>" [cell, cellName(T), color(yellow), contentStartColumn(9), contentStartLine(9), format(%1%i%n%2%n%3%d%n%4), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]), topcell]
  syntax OslCellOpt ::= OslCell
  syntax OslCellOpt ::= "project:OslCellOpt" "(" K ")" [function, projection]
  syntax OslCellOpt ::= "noOslCell" [cellOptAbsent(OslCell)]
  syntax OslCell ::= "project:OslCell" "(" K ")" [function, projection]
  syntax OslCell ::= "initOslCell" [function, initializer, noThread]
  syntax OslCell ::= "<osl>" K "</osl>" [cell, cellName(osl), color(red), contentStartColumn(9), contentStartLine(9), format(%1%i%n%2%d%n%3), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax KItem ::= TCellOpt
  syntax KItem ::= TCellFragment
  syntax KItem ::= TCell
  syntax KItem ::= OslCellOpt
  syntax KItem ::= OslCell
  syntax KItem ::= KCellOpt
  syntax KItem ::= KCell
  syntax KItem ::= GeneratedTopCellFragment
  syntax KItem ::= GeneratedTopCell
  syntax KItem ::= GeneratedCounterCellOpt
  syntax KItem ::= GeneratedCounterCell
  syntax KCellOpt ::= KCell
  syntax KCellOpt ::= "project:KCellOpt" "(" K ")" [function, projection]
  syntax KCellOpt ::= "noKCell" [cellOptAbsent(KCell)]
  syntax KCell ::= "project:KCell" "(" K ")" [function, projection]
  syntax KCell ::= "initKCell" "(" Map ")" [function, initializer, noThread]
  syntax KCell ::= "<k>" K "</k>" [cell, cellName(k), color(green), contentStartColumn(9), contentStartLine(9), format(%1%i%n%2%d%n%3), maincell, org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  syntax K
  syntax GeneratedTopCellFragment ::= "project:GeneratedTopCellFragment" "(" K ")" [function, projection]
  syntax GeneratedTopCellFragment ::= "<generatedTop>-fragment" TCellOpt GeneratedCounterCellOpt "</generatedTop>-fragment" [cellFragment(GeneratedTopCell)]
  syntax GeneratedTopCell ::= "project:GeneratedTopCell" "(" K ")" [function, projection]
  syntax GeneratedTopCell ::= "initGeneratedTopCell" "(" Map ")" [function, initializer, noThread]
  syntax GeneratedTopCell ::= "<generatedTop>" TCell GeneratedCounterCell "</generatedTop>" [cell, cellName(generatedTop), format(%2), topcell]
  syntax GeneratedCounterCellOpt ::= GeneratedCounterCell
  syntax GeneratedCounterCellOpt ::= "project:GeneratedCounterCellOpt" "(" K ")" [function, projection]
  syntax GeneratedCounterCellOpt ::= "noGeneratedCounterCell" [cellOptAbsent(GeneratedCounterCell)]
  syntax GeneratedCounterCell ::= "project:GeneratedCounterCell" "(" K ")" [function, projection]
  syntax GeneratedCounterCell ::= "initGeneratedCounterCell" [function, initializer, noThread]
  syntax GeneratedCounterCell ::= "getGeneratedCounterCell" "(" GeneratedTopCell ")" [function]
  syntax GeneratedCounterCell ::= "<generatedCounter>" Int "</generatedCounter>" [cell, cellName(generatedCounter), format(%1%i%n%2%d%n%3)]
  syntax Bool ::= "isTCellOpt" "(" K ")" [function, predicate(TCellOpt)]
  syntax Bool ::= "isTCellFragment" "(" K ")" [function, predicate(TCellFragment)]
  syntax Bool ::= "isTCell" "(" K ")" [function, predicate(TCell)]
  syntax Bool ::= "isOslCellOpt" "(" K ")" [function, predicate(OslCellOpt)]
  syntax Bool ::= "isOslCell" "(" K ")" [function, predicate(OslCell)]
  syntax Bool ::= "isKCellOpt" "(" K ")" [function, predicate(KCellOpt)]
  syntax Bool ::= "isKCell" "(" K ")" [function, predicate(KCell)]
  syntax Bool ::= "isGeneratedTopCellFragment" "(" K ")" [function, predicate(GeneratedTopCellFragment)]
  syntax Bool ::= "isGeneratedTopCell" "(" K ")" [function, predicate(GeneratedTopCell)]
  syntax Bool ::= "isGeneratedCounterCellOpt" "(" K ")" [function, predicate(GeneratedCounterCellOpt)]
  syntax Bool ::= "isGeneratedCounterCell" "(" K ")" [function, predicate(GeneratedCounterCell)]
  rule initTCell(Init)=>`<T>`(initKCell(Init),initOslCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(42fd3ceef559518cae6cb3bc717b3f7f2bb2ff115b0d4423f0ff8823c3fd7edc), initializer]
  rule initOslCell(.KList)=>`<osl>`(.K) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(1311d8babbe79a26cdb1cff685b721797666795149ff562a5104b17b94fe64c1), initializer]
  rule initKCell(Init)=>`<k>`(`project:TranslationUnit`(`Map:lookup`(Init,#token("$PGM","KConfigVar")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(842b0b336fa2c8aa7481d363821d5d62720b8e1539e4fa1807d12d905a2e9c39), initializer]
  rule initGeneratedTopCell(Init)=>`<generatedTop>`(initTCell(Init),initGeneratedCounterCell(.KList)) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule initGeneratedCounterCell(.KList)=>`<generatedCounter>`(#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [initializer]
  rule getGeneratedCounterCell(`<generatedTop>`(_DotVar0,Cell))=>Cell requires #token("true","Bool") ensures #token("true","Bool") 
  rule `project:TCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TCellFragment`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:OslCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:OslCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedTopCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedTopCellFragment`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedCounterCell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:GeneratedCounterCellOpt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module C-SYNTAX [org.kframework.attributes.Location(Location(1,1,277,9)), org.kframework.attributes.Source(Source(/home/alessio/Project/osl/cfrontend/syntax.k))]
  imports DOMAINS
  syntax priority __{_;}_C-SYNTAX_StructOrFunionSpecifier_StructOrUnion_Id_ListStructDeclaration _{_;}_C-SYNTAX_StructOrFunionSpecifier_StructOrUnion_ListStructDeclaration > ___C-SYNTAX_StructOrFunionSpecifier_StructOrUnion_Id > __{}_C-SYNTAX_StructOrFunionSpecifier_StructOrUnion_Id
  syntax UnaryOperator ::= "~"
  syntax UnaryOperator ::= "project:UnaryOperator" "(" K ")" [function, projection]
  syntax UnaryOperator ::= "-"
  syntax UnaryOperator ::= "+"
  syntax UnaryOperator ::= "*"
  syntax UnaryOperator ::= "&"
  syntax UnaryOperator ::= "!"
  syntax UnaryExpression ::= UnaryOperator CastExpression
  syntax UnaryExpression ::= PostfixExpression
  syntax UnaryExpression ::= "sizeof" UnaryExpression
  syntax UnaryExpression ::= "sizeof" TypeName
  syntax UnaryExpression ::= "project:UnaryExpression" "(" K ")" [function, projection]
  syntax UnaryExpression ::= "--" UnaryExpression
  syntax UnaryExpression ::= "++" UnaryExpression
  syntax TypedefOfname ::= Id
  syntax TypedefOfname ::= "project:TypedefOfname" "(" K ")" [function, projection]
  syntax TypeSpecifier ::= StructOrFunionSpecifier
  syntax TypeSpecifier ::= EnumOfspecifier
  syntax TypeSpecifier ::= "void"
  syntax TypeSpecifier ::= "unsigned"
  syntax TypeSpecifier ::= "signed"
  syntax TypeSpecifier ::= "short"
  syntax TypeSpecifier ::= "project:TypeSpecifier" "(" K ")" [function, projection]
  syntax TypeSpecifier ::= "long"
  syntax TypeSpecifier ::= "int"
  syntax TypeSpecifier ::= "float"
  syntax TypeSpecifier ::= "double"
  syntax TypeSpecifier ::= "char"
  syntax TypeQualifier ::= "volatile"
  syntax TypeQualifier ::= "project:TypeQualifier" "(" K ")" [function, projection]
  syntax TypeQualifier ::= "const"
  syntax TypeName ::= ListSpecifierQualifier AbstractDeclarator
  syntax TypeName ::= ListSpecifierQualifier
  syntax TypeName ::= "project:TypeName" "(" K ")" [function, projection]
  syntax TranslationUnit ::= ListExternalDeclaration
  syntax TranslationUnit ::= "project:TranslationUnit" "(" K ")" [function, projection]
  syntax StructOrUnion ::= "union"
  syntax StructOrUnion ::= "struct"
  syntax StructOrUnion ::= "project:StructOrUnion" "(" K ")" [function, projection]
  syntax StructOrFunionSpecifier ::= StructOrUnion Id "{" ListStructDeclaration ";" "}"
  syntax StructOrFunionSpecifier ::= StructOrUnion Id "{" "}"
  syntax StructOrFunionSpecifier ::= StructOrUnion Id
  syntax StructOrFunionSpecifier ::= StructOrUnion "{" ListStructDeclaration ";" "}"
  syntax StructOrFunionSpecifier ::= "project:StructOrFunionSpecifier" "(" K ")" [function, projection]
  syntax StructDeclaratorList ::= StructDeclaratorList "," StructDeclarator
  syntax StructDeclaratorList ::= StructDeclarator
  syntax StructDeclaratorList ::= "project:StructDeclaratorList" "(" K ")" [function, projection]
  syntax StructDeclarator ::= Declarator ":" ConstantExpression
  syntax StructDeclarator ::= Declarator
  syntax StructDeclarator ::= "project:StructDeclarator" "(" K ")" [function, projection]
  syntax StructDeclarator ::= ":" ConstantExpression
  syntax StructDeclaration ::= ListSpecifierQualifier StructDeclaratorList
  syntax StructDeclaration ::= "project:StructDeclaration" "(" K ")" [function, projection]
  syntax StorageClassSpecifier ::= "typedef"
  syntax StorageClassSpecifier ::= "static"
  syntax StorageClassSpecifier ::= "register"
  syntax StorageClassSpecifier ::= "project:StorageClassSpecifier" "(" K ")" [function, projection]
  syntax StorageClassSpecifier ::= "extern"
  syntax StorageClassSpecifier ::= "auto"
  syntax Statement ::= SelectionStatement
  syntax Statement ::= LabeledStatement
  syntax Statement ::= JumpStatement
  syntax Statement ::= IterationStatement
  syntax Statement ::= ExpressionStatement
  syntax Statement ::= CompoundStatement
  syntax Statement ::= "project:Statement" "(" K ")" [function, projection]
  syntax SpecifierQualifier ::= TypeSpecifier
  syntax SpecifierQualifier ::= TypeQualifier
  syntax SpecifierQualifier ::= "project:SpecifierQualifier" "(" K ")" [function, projection]
  syntax ShiftExpression ::= ShiftExpression ">>" AdditiveExpression
  syntax ShiftExpression ::= ShiftExpression "<<" AdditiveExpression
  syntax ShiftExpression ::= AdditiveExpression
  syntax ShiftExpression ::= "project:ShiftExpression" "(" K ")" [function, projection]
  syntax SelectionStatement ::= "switch" "(" Expression ")" Statement
  syntax SelectionStatement ::= "project:SelectionStatement" "(" K ")" [function, projection]
  syntax SelectionStatement ::= "if" "(" Expression ")" Statement "else" Statement
  syntax SelectionStatement ::= "if" "(" Expression ")" Statement
  syntax RelationalExpression ::= ShiftExpression
  syntax RelationalExpression ::= RelationalExpression ">=" ShiftExpression
  syntax RelationalExpression ::= RelationalExpression ">" ShiftExpression
  syntax RelationalExpression ::= RelationalExpression "<=" ShiftExpression
  syntax RelationalExpression ::= RelationalExpression "<" ShiftExpression
  syntax RelationalExpression ::= "project:RelationalExpression" "(" K ")" [function, projection]
  syntax PrimaryExpression ::= String
  syntax PrimaryExpression ::= Id
  syntax PrimaryExpression ::= Constant
  syntax PrimaryExpression ::= "project:PrimaryExpression" "(" K ")" [function, projection]
  syntax PrimaryExpression ::= "(" Expression ")"
  syntax PostfixExpression ::= PrimaryExpression
  syntax PostfixExpression ::= PostfixExpression "[" Expression "]"
  syntax PostfixExpression ::= PostfixExpression "." Id
  syntax PostfixExpression ::= PostfixExpression "->" Id
  syntax PostfixExpression ::= PostfixExpression "--"
  syntax PostfixExpression ::= PostfixExpression "++"
  syntax PostfixExpression ::= PostfixExpression "(" ListAssignmentExpression ")"
  syntax PostfixExpression ::= "project:PostfixExpression" "(" K ")" [function, projection]
  syntax Pointer ::= "project:Pointer" "(" K ")" [function, projection]
  syntax Pointer ::= "*" ListTypeQualifier Pointer
  syntax Pointer ::= "*" ListTypeQualifier
  syntax ParameterTypeList ::= ParameterList "," "..."
  syntax ParameterTypeList ::= ParameterList
  syntax ParameterTypeList ::= "project:ParameterTypeList" "(" K ")" [function, projection]
  syntax ParameterList ::= ParameterList "," ParameterDeclaration
  syntax ParameterList ::= ParameterDeclaration
  syntax ParameterList ::= "project:ParameterList" "(" K ")" [function, projection]
  syntax ParameterDeclaration ::= ListDeclarationSpecifier Declarator
  syntax ParameterDeclaration ::= ListDeclarationSpecifier AbstractDeclarator
  syntax ParameterDeclaration ::= ListDeclarationSpecifier
  syntax ParameterDeclaration ::= "project:ParameterDeclaration" "(" K ")" [function, projection]
  syntax MultiplicativeExpression ::= MultiplicativeExpression "/" CastExpression
  syntax MultiplicativeExpression ::= MultiplicativeExpression "*" CastExpression
  syntax MultiplicativeExpression ::= MultiplicativeExpression "%" CastExpression
  syntax MultiplicativeExpression ::= CastExpression
  syntax MultiplicativeExpression ::= "project:MultiplicativeExpression" "(" K ")" [function, projection]
  syntax LogicalOforExpression ::= LogicalOforExpression "||" LogicalOfandExpression
  syntax LogicalOforExpression ::= LogicalOfandExpression
  syntax LogicalOforExpression ::= "project:LogicalOforExpression" "(" K ")" [function, projection]
  syntax LogicalOfandExpression ::= LogicalOfandExpression "&&" InclusiveOforExpression
  syntax LogicalOfandExpression ::= InclusiveOforExpression
  syntax LogicalOfandExpression ::= "project:LogicalOfandExpression" "(" K ")" [function, projection]
  syntax ListTypeQualifier ::= TypeQualifier "" ListTypeQualifier [right, userList(*)]
  syntax ListTypeQualifier ::= "project:ListTypeQualifier" "(" K ")" [function, projection]
  syntax ListTypeQualifier ::= ".ListTypeQualifier" [klabel(.List{"___C-SYNTAX"}), userList(*)]
  syntax ListStructDeclaration ::= StructDeclaration ";" ListStructDeclaration [right, userList(*)]
  syntax ListStructDeclaration ::= "project:ListStructDeclaration" "(" K ")" [function, projection]
  syntax ListStructDeclaration ::= ".ListStructDeclaration" [klabel(.List{"_;__C-SYNTAX"}), userList(*)]
  syntax ListStatement ::= Statement "" ListStatement [right, userList(*)]
  syntax ListStatement ::= "project:ListStatement" "(" K ")" [function, projection]
  syntax ListStatement ::= ".ListStatement" [klabel(.List{"___C-SYNTAX"}), userList(*)]
  syntax ListSpecifierQualifier ::= SpecifierQualifier "" ListSpecifierQualifier [right, userList(*)]
  syntax ListSpecifierQualifier ::= "project:ListSpecifierQualifier" "(" K ")" [function, projection]
  syntax ListSpecifierQualifier ::= ".ListSpecifierQualifier" [klabel(.List{"___C-SYNTAX"}), userList(*)]
  syntax ListInitDeclarator ::= Initdeclarator "," ListInitDeclarator [right, userList(*)]
  syntax ListInitDeclarator ::= "project:ListInitDeclarator" "(" K ")" [function, projection]
  syntax ListInitDeclarator ::= ".ListInitDeclarator" [klabel(.List{"_,__C-SYNTAX"}), userList(*)]
  syntax ListExternalDeclaration ::= ExternalDeclaration "" ListExternalDeclaration [right, userList(*)]
  syntax ListExternalDeclaration ::= "project:ListExternalDeclaration" "(" K ")" [function, projection]
  syntax ListExternalDeclaration ::= ".ListExternalDeclaration" [klabel(.List{"___C-SYNTAX"}), userList(*)]
  syntax ListDeclarationSpecifier ::= DeclarationSpecifier "" ListDeclarationSpecifier [right, userList(+)]
  syntax ListDeclarationSpecifier ::= "project:ListDeclarationSpecifier" "(" K ")" [function, projection]
  syntax ListDeclarationSpecifier ::= ".ListDeclarationSpecifier" [klabel(.List{"___C-SYNTAX"}), userList(+)]
  syntax ListDeclaration ::= Declaration "" ListDeclaration [right, userList(*)]
  syntax ListDeclaration ::= "project:ListDeclaration" "(" K ")" [function, projection]
  syntax ListDeclaration ::= ".ListDeclaration" [klabel(.List{"___C-SYNTAX"}), userList(*)]
  syntax ListAssignmentExpression ::= AssignmentExpression "," ListAssignmentExpression [right, userList(*)]
  syntax ListAssignmentExpression ::= "project:ListAssignmentExpression" "(" K ")" [function, projection]
  syntax ListAssignmentExpression ::= ".ListAssignmentExpression" [klabel(.List{"_,__C-SYNTAX"}), userList(*)]
  syntax LabeledStatement ::= Id ":" Statement
  syntax LabeledStatement ::= "project:LabeledStatement" "(" K ")" [function, projection]
  syntax LabeledStatement ::= "default" ":" Statement
  syntax LabeledStatement ::= "case" ConstantExpression ":" Statement
  syntax KItem ::= UnaryOperator
  syntax KItem ::= UnaryExpression
  syntax KItem ::= TypedefOfname
  syntax KItem ::= TypeSpecifier
  syntax KItem ::= TypeQualifier
  syntax KItem ::= TypeName
  syntax KItem ::= TranslationUnit
  syntax KItem ::= StructOrUnion
  syntax KItem ::= StructOrFunionSpecifier
  syntax KItem ::= StructDeclaratorList
  syntax KItem ::= StructDeclarator
  syntax KItem ::= StructDeclaration
  syntax KItem ::= StorageClassSpecifier
  syntax KItem ::= Statement
  syntax KItem ::= SpecifierQualifier
  syntax KItem ::= ShiftExpression
  syntax KItem ::= SelectionStatement
  syntax KItem ::= RelationalExpression
  syntax KItem ::= PrimaryExpression
  syntax KItem ::= PostfixExpression
  syntax KItem ::= Pointer
  syntax KItem ::= ParameterTypeList
  syntax KItem ::= ParameterList
  syntax KItem ::= ParameterDeclaration
  syntax KItem ::= MultiplicativeExpression
  syntax KItem ::= LogicalOforExpression
  syntax KItem ::= LogicalOfandExpression
  syntax KItem ::= ListTypeQualifier
  syntax KItem ::= ListStructDeclaration
  syntax KItem ::= ListStatement
  syntax KItem ::= ListSpecifierQualifier
  syntax KItem ::= ListInitDeclarator
  syntax KItem ::= ListExternalDeclaration
  syntax KItem ::= ListDeclarationSpecifier
  syntax KItem ::= ListDeclaration
  syntax KItem ::= ListAssignmentExpression
  syntax KItem ::= LabeledStatement
  syntax KItem ::= JumpStatement
  syntax KItem ::= IterationStatement
  syntax KItem ::= InitializerList
  syntax KItem ::= Initializer
  syntax KItem ::= Initdeclarator
  syntax KItem ::= InclusiveOforExpression
  syntax KItem ::= Ids
  syntax KItem ::= FunctionDefinition
  syntax KItem ::= ExternalDeclaration
  syntax KItem ::= ExpressionStatement
  syntax KItem ::= Expression
  syntax KItem ::= ExclusiveOforExpression
  syntax KItem ::= EqualityExpression
  syntax KItem ::= EnumeratorList
  syntax KItem ::= Enumerator
  syntax KItem ::= EnumerationConstant
  syntax KItem ::= EnumOfspecifier
  syntax KItem ::= DirectDeclarator
  syntax KItem ::= DirectAbstractDeclarator
  syntax KItem ::= Declarator
  syntax KItem ::= DeclarationSpecifier
  syntax KItem ::= Declaration
  syntax KItem ::= ConstantExpression
  syntax KItem ::= Constant
  syntax KItem ::= ConditionalExpression
  syntax KItem ::= CompoundStatement
  syntax KItem ::= CastExpression
  syntax KItem ::= AssignmentOperator
  syntax KItem ::= AssignmentExpression
  syntax KItem ::= AndExpression
  syntax KItem ::= AdditiveExpression
  syntax KItem ::= AbstractDeclarator
  syntax K
  syntax JumpStatement ::= "return" Expression ";"
  syntax JumpStatement ::= "project:JumpStatement" "(" K ")" [function, projection]
  syntax JumpStatement ::= "goto" Id ";"
  syntax JumpStatement ::= "continue" ";"
  syntax JumpStatement ::= "break" ";"
  syntax IterationStatement ::= "while" "(" Expression ")" Statement
  syntax IterationStatement ::= "project:IterationStatement" "(" K ")" [function, projection]
  syntax IterationStatement ::= "for" "(" Expression ";" Expression ";" Expression ")" Statement
  syntax IterationStatement ::= "do" Statement "while" "(" Expression ")" ";"
  syntax InitializerList ::= InitializerList "," Initializer
  syntax InitializerList ::= Initializer
  syntax InitializerList ::= "project:InitializerList" "(" K ")" [function, projection]
  syntax Initializer ::= AssignmentExpression
  syntax Initializer ::= "{" InitializerList "}"
  syntax Initializer ::= "{" InitializerList "," "}"
  syntax Initializer ::= "project:Initializer" "(" K ")" [function, projection]
  syntax Initdeclarator ::= Declarator "=" Initializer
  syntax Initdeclarator ::= Declarator
  syntax Initdeclarator ::= "project:Initdeclarator" "(" K ")" [function, projection]
  syntax InclusiveOforExpression ::= InclusiveOforExpression "|" ExclusiveOforExpression
  syntax InclusiveOforExpression ::= ExclusiveOforExpression
  syntax InclusiveOforExpression ::= "project:InclusiveOforExpression" "(" K ")" [function, projection]
  syntax Ids ::= Id "" Ids [right, userList(*)]
  syntax Ids ::= "project:Ids" "(" K ")" [function, projection]
  syntax Ids ::= ".Ids" [klabel(.List{"___C-SYNTAX"}), userList(*)]
  syntax FunctionDefinition ::= ListDeclarationSpecifier Declarator ListDeclaration CompoundStatement
  syntax FunctionDefinition ::= "project:FunctionDefinition" "(" K ")" [function, projection]
  syntax ExternalDeclaration ::= FunctionDefinition
  syntax ExternalDeclaration ::= Declaration
  syntax ExternalDeclaration ::= "project:ExternalDeclaration" "(" K ")" [function, projection]
  syntax ExpressionStatement ::= Expression ";"
  syntax ExpressionStatement ::= "project:ExpressionStatement" "(" K ")" [function, projection]
  syntax ExpressionStatement ::= ";"
  syntax Expression ::= Expression "," AssignmentExpression
  syntax Expression ::= AssignmentExpression
  syntax Expression ::= "project:Expression" "(" K ")" [function, projection]
  syntax ExclusiveOforExpression ::= ExclusiveOforExpression "^" AndExpression
  syntax ExclusiveOforExpression ::= AndExpression
  syntax ExclusiveOforExpression ::= "project:ExclusiveOforExpression" "(" K ")" [function, projection]
  syntax EqualityExpression ::= RelationalExpression
  syntax EqualityExpression ::= EqualityExpression "==" RelationalExpression
  syntax EqualityExpression ::= EqualityExpression "!=" RelationalExpression
  syntax EqualityExpression ::= "project:EqualityExpression" "(" K ")" [function, projection]
  syntax EnumeratorList ::= Enumerator "," EnumeratorList [right, userList(*)]
  syntax EnumeratorList ::= "project:EnumeratorList" "(" K ")" [function, projection]
  syntax EnumeratorList ::= ".EnumeratorList" [klabel(.List{"_,__C-SYNTAX"}), userList(*)]
  syntax Enumerator ::= Id "=" Int
  syntax Enumerator ::= Id
  syntax Enumerator ::= "project:Enumerator" "(" K ")" [function, projection]
  syntax EnumerationConstant ::= Id
  syntax EnumerationConstant ::= "project:EnumerationConstant" "(" K ")" [function, projection]
  syntax EnumOfspecifier ::= "project:EnumOfspecifier" "(" K ")" [function, projection]
  syntax EnumOfspecifier ::= "enum" Id "{" EnumeratorList "}"
  syntax EnumOfspecifier ::= "enum" Id
  syntax EnumOfspecifier ::= "enum" "{" EnumeratorList "}"
  syntax DirectDeclarator ::= Id
  syntax DirectDeclarator ::= DirectDeclarator "[" ConstantExpression "]"
  syntax DirectDeclarator ::= DirectDeclarator "[" "]"
  syntax DirectDeclarator ::= DirectDeclarator "(" ParameterTypeList ")"
  syntax DirectDeclarator ::= DirectDeclarator "(" Ids ")"
  syntax DirectDeclarator ::= "project:DirectDeclarator" "(" K ")" [function, projection]
  syntax DirectDeclarator ::= "(" Declarator ")"
  syntax DirectAbstractDeclarator ::= DirectAbstractDeclarator "[" ConstantExpression "]"
  syntax DirectAbstractDeclarator ::= DirectAbstractDeclarator "[" "]"
  syntax DirectAbstractDeclarator ::= DirectAbstractDeclarator "(" ParameterTypeList ")"
  syntax DirectAbstractDeclarator ::= DirectAbstractDeclarator "(" ")"
  syntax DirectAbstractDeclarator ::= "project:DirectAbstractDeclarator" "(" K ")" [function, projection]
  syntax DirectAbstractDeclarator ::= "[" ConstantExpression "]"
  syntax DirectAbstractDeclarator ::= "[" "]"
  syntax DirectAbstractDeclarator ::= "(" ParameterTypeList ")"
  syntax DirectAbstractDeclarator ::= "(" AbstractDeclarator ")"
  syntax DirectAbstractDeclarator ::= "(" ")"
  syntax Declarator ::= Pointer DirectDeclarator
  syntax Declarator ::= DirectDeclarator
  syntax Declarator ::= "project:Declarator" "(" K ")" [function, projection]
  syntax DeclarationSpecifier ::= TypeSpecifier
  syntax DeclarationSpecifier ::= TypeQualifier
  syntax DeclarationSpecifier ::= StorageClassSpecifier
  syntax DeclarationSpecifier ::= "project:DeclarationSpecifier" "(" K ")" [function, projection]
  syntax Declaration ::= ListDeclarationSpecifier ListInitDeclarator ";"
  syntax Declaration ::= "project:Declaration" "(" K ")" [function, projection]
  syntax ConstantExpression ::= ConditionalExpression
  syntax ConstantExpression ::= "project:ConstantExpression" "(" K ")" [function, projection]
  syntax Constant ::= Int
  syntax Constant ::= Float
  syntax Constant ::= EnumerationConstant
  syntax Constant ::= "project:Constant" "(" K ")" [function, projection]
  syntax ConditionalExpression ::= LogicalOforExpression "?" Expression ":" ConditionalExpression
  syntax ConditionalExpression ::= LogicalOforExpression
  syntax ConditionalExpression ::= "project:ConditionalExpression" "(" K ")" [function, projection]
  syntax CompoundStatement ::= "{" ListDeclaration ListStatement "}"
  syntax CompoundStatement ::= "project:CompoundStatement" "(" K ")" [function, projection]
  syntax CastExpression ::= UnaryExpression
  syntax CastExpression ::= "project:CastExpression" "(" K ")" [function, projection]
  syntax CastExpression ::= "(" TypeName ")" CastExpression
  syntax Bool ::= "isUnaryOperator" "(" K ")" [function, predicate(UnaryOperator)]
  syntax Bool ::= "isUnaryExpression" "(" K ")" [function, predicate(UnaryExpression)]
  syntax Bool ::= "isTypedefOfname" "(" K ")" [function, predicate(TypedefOfname)]
  syntax Bool ::= "isTypeSpecifier" "(" K ")" [function, predicate(TypeSpecifier)]
  syntax Bool ::= "isTypeQualifier" "(" K ")" [function, predicate(TypeQualifier)]
  syntax Bool ::= "isTypeName" "(" K ")" [function, predicate(TypeName)]
  syntax Bool ::= "isTranslationUnit" "(" K ")" [function, predicate(TranslationUnit)]
  syntax Bool ::= "isStructOrUnion" "(" K ")" [function, predicate(StructOrUnion)]
  syntax Bool ::= "isStructOrFunionSpecifier" "(" K ")" [function, predicate(StructOrFunionSpecifier)]
  syntax Bool ::= "isStructDeclaratorList" "(" K ")" [function, predicate(StructDeclaratorList)]
  syntax Bool ::= "isStructDeclarator" "(" K ")" [function, predicate(StructDeclarator)]
  syntax Bool ::= "isStructDeclaration" "(" K ")" [function, predicate(StructDeclaration)]
  syntax Bool ::= "isStorageClassSpecifier" "(" K ")" [function, predicate(StorageClassSpecifier)]
  syntax Bool ::= "isStatement" "(" K ")" [function, predicate(Statement)]
  syntax Bool ::= "isSpecifierQualifier" "(" K ")" [function, predicate(SpecifierQualifier)]
  syntax Bool ::= "isShiftExpression" "(" K ")" [function, predicate(ShiftExpression)]
  syntax Bool ::= "isSelectionStatement" "(" K ")" [function, predicate(SelectionStatement)]
  syntax Bool ::= "isRelationalExpression" "(" K ")" [function, predicate(RelationalExpression)]
  syntax Bool ::= "isPrimaryExpression" "(" K ")" [function, predicate(PrimaryExpression)]
  syntax Bool ::= "isPostfixExpression" "(" K ")" [function, predicate(PostfixExpression)]
  syntax Bool ::= "isPointer" "(" K ")" [function, predicate(Pointer)]
  syntax Bool ::= "isParameterTypeList" "(" K ")" [function, predicate(ParameterTypeList)]
  syntax Bool ::= "isParameterList" "(" K ")" [function, predicate(ParameterList)]
  syntax Bool ::= "isParameterDeclaration" "(" K ")" [function, predicate(ParameterDeclaration)]
  syntax Bool ::= "isMultiplicativeExpression" "(" K ")" [function, predicate(MultiplicativeExpression)]
  syntax Bool ::= "isLogicalOforExpression" "(" K ")" [function, predicate(LogicalOforExpression)]
  syntax Bool ::= "isLogicalOfandExpression" "(" K ")" [function, predicate(LogicalOfandExpression)]
  syntax Bool ::= "isListTypeQualifier" "(" K ")" [function, predicate(ListTypeQualifier)]
  syntax Bool ::= "isListStructDeclaration" "(" K ")" [function, predicate(ListStructDeclaration)]
  syntax Bool ::= "isListStatement" "(" K ")" [function, predicate(ListStatement)]
  syntax Bool ::= "isListSpecifierQualifier" "(" K ")" [function, predicate(ListSpecifierQualifier)]
  syntax Bool ::= "isListInitDeclarator" "(" K ")" [function, predicate(ListInitDeclarator)]
  syntax Bool ::= "isListExternalDeclaration" "(" K ")" [function, predicate(ListExternalDeclaration)]
  syntax Bool ::= "isListDeclarationSpecifier" "(" K ")" [function, predicate(ListDeclarationSpecifier)]
  syntax Bool ::= "isListDeclaration" "(" K ")" [function, predicate(ListDeclaration)]
  syntax Bool ::= "isListAssignmentExpression" "(" K ")" [function, predicate(ListAssignmentExpression)]
  syntax Bool ::= "isLabeledStatement" "(" K ")" [function, predicate(LabeledStatement)]
  syntax Bool ::= "isKResult" "(" K ")" [function, klabel(isKResult), symbol]
  syntax Bool ::= "isJumpStatement" "(" K ")" [function, predicate(JumpStatement)]
  syntax Bool ::= "isIterationStatement" "(" K ")" [function, predicate(IterationStatement)]
  syntax Bool ::= "isInitializerList" "(" K ")" [function, predicate(InitializerList)]
  syntax Bool ::= "isInitializer" "(" K ")" [function, predicate(Initializer)]
  syntax Bool ::= "isInitdeclarator" "(" K ")" [function, predicate(Initdeclarator)]
  syntax Bool ::= "isInclusiveOforExpression" "(" K ")" [function, predicate(InclusiveOforExpression)]
  syntax Bool ::= "isIds" "(" K ")" [function, predicate(Ids)]
  syntax Bool ::= "isFunctionDefinition" "(" K ")" [function, predicate(FunctionDefinition)]
  syntax Bool ::= "isExternalDeclaration" "(" K ")" [function, predicate(ExternalDeclaration)]
  syntax Bool ::= "isExpressionStatement" "(" K ")" [function, predicate(ExpressionStatement)]
  syntax Bool ::= "isExpression" "(" K ")" [function, predicate(Expression)]
  syntax Bool ::= "isExclusiveOforExpression" "(" K ")" [function, predicate(ExclusiveOforExpression)]
  syntax Bool ::= "isEqualityExpression" "(" K ")" [function, predicate(EqualityExpression)]
  syntax Bool ::= "isEnumeratorList" "(" K ")" [function, predicate(EnumeratorList)]
  syntax Bool ::= "isEnumerator" "(" K ")" [function, predicate(Enumerator)]
  syntax Bool ::= "isEnumerationConstant" "(" K ")" [function, predicate(EnumerationConstant)]
  syntax Bool ::= "isEnumOfspecifier" "(" K ")" [function, predicate(EnumOfspecifier)]
  syntax Bool ::= "isDirectDeclarator" "(" K ")" [function, predicate(DirectDeclarator)]
  syntax Bool ::= "isDirectAbstractDeclarator" "(" K ")" [function, predicate(DirectAbstractDeclarator)]
  syntax Bool ::= "isDeclarator" "(" K ")" [function, predicate(Declarator)]
  syntax Bool ::= "isDeclarationSpecifier" "(" K ")" [function, predicate(DeclarationSpecifier)]
  syntax Bool ::= "isDeclaration" "(" K ")" [function, predicate(Declaration)]
  syntax Bool ::= "isConstantExpression" "(" K ")" [function, predicate(ConstantExpression)]
  syntax Bool ::= "isConstant" "(" K ")" [function, predicate(Constant)]
  syntax Bool ::= "isConditionalExpression" "(" K ")" [function, predicate(ConditionalExpression)]
  syntax Bool ::= "isCompoundStatement" "(" K ")" [function, predicate(CompoundStatement)]
  syntax Bool ::= "isCastExpression" "(" K ")" [function, predicate(CastExpression)]
  syntax Bool ::= "isAssignmentOperator" "(" K ")" [function, predicate(AssignmentOperator)]
  syntax Bool ::= "isAssignmentExpression" "(" K ")" [function, predicate(AssignmentExpression)]
  syntax Bool ::= "isAndExpression" "(" K ")" [function, predicate(AndExpression)]
  syntax Bool ::= "isAdditiveExpression" "(" K ")" [function, predicate(AdditiveExpression)]
  syntax Bool ::= "isAbstractDeclarator" "(" K ")" [function, predicate(AbstractDeclarator)]
  syntax AssignmentOperator ::= "|="
  syntax AssignmentOperator ::= "project:AssignmentOperator" "(" K ")" [function, projection]
  syntax AssignmentOperator ::= "^="
  syntax AssignmentOperator ::= "Of="
  syntax AssignmentOperator ::= "="
  syntax AssignmentOperator ::= "/="
  syntax AssignmentOperator ::= "+="
  syntax AssignmentOperator ::= "*="
  syntax AssignmentOperator ::= "&="
  syntax AssignmentOperator ::= "%="
  syntax AssignmentExpression ::= UnaryExpression AssignmentOperator AssignmentExpression
  syntax AssignmentExpression ::= ConditionalExpression
  syntax AssignmentExpression ::= "project:AssignmentExpression" "(" K ")" [function, projection]
  syntax AndExpression ::= EqualityExpression
  syntax AndExpression ::= AndExpression "&" EqualityExpression
  syntax AndExpression ::= "project:AndExpression" "(" K ")" [function, projection]
  syntax AdditiveExpression ::= MultiplicativeExpression
  syntax AdditiveExpression ::= AdditiveExpression "-" MultiplicativeExpression
  syntax AdditiveExpression ::= AdditiveExpression "+" MultiplicativeExpression
  syntax AdditiveExpression ::= "project:AdditiveExpression" "(" K ")" [function, projection]
  syntax AbstractDeclarator ::= Pointer DirectAbstractDeclarator
  syntax AbstractDeclarator ::= Pointer
  syntax AbstractDeclarator ::= DirectAbstractDeclarator
  syntax AbstractDeclarator ::= "project:AbstractDeclarator" "(" K ")" [function, projection]
  rule `project:UnaryOperator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:UnaryExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TypedefOfname`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TypeSpecifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TypeQualifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TypeName`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:TranslationUnit`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:StructOrUnion`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:StructOrFunionSpecifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:StructDeclarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:StructDeclaratorList`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:StructDeclaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:StorageClassSpecifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Statement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:SpecifierQualifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ShiftExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:SelectionStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:RelationalExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:PrimaryExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:PostfixExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Pointer`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ParameterTypeList`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ParameterList`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ParameterDeclaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:MultiplicativeExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:LogicalOforExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:LogicalOfandExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListTypeQualifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListStructDeclaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListSpecifierQualifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListInitDeclarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListExternalDeclaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListDeclaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListDeclarationSpecifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ListAssignmentExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:LabeledStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:JumpStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IterationStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Initializer`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:InitializerList`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Initdeclarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:InclusiveOforExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Ids`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:FunctionDefinition`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ExternalDeclaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Expression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ExpressionStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ExclusiveOforExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:EqualityExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Enumerator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:EnumeratorList`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:EnumerationConstant`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:EnumOfspecifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:DirectDeclarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:DirectAbstractDeclarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Declarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Declaration`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:DeclarationSpecifier`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Constant`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ConstantExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:ConditionalExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:CompoundStatement`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:CastExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:AssignmentOperator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:AssignmentExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:AndExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:AdditiveExpression`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:AbstractDeclarator`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module CONFIG-CELLS [org.kframework.attributes.Location(Location(299,1,312,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS
  imports KCELLS
  syntax K
  syntax Cell ::= "<" #CellName #CellProperties ">" K "</" #CellName ">" [klabel(#configCell), symbol]
  syntax Cell ::= "<" #CellName "/>" [klabel(#externalCell), symbol]
  syntax Bool ::= "is#CellProperty" "(" K ")" [function, predicate(#CellProperty)]
  syntax Bool ::= "is#CellProperties" "(" K ")" [function, predicate(#CellProperties)]
  syntax Bool ::= "is#CellName" "(" K ")" [function, predicate(#CellName)]
  syntax #CellProperty ::= #CellName "=" KString [klabel(#cellProperty), symbol]
  syntax #CellProperties ::= #CellProperty #CellProperties [klabel(#cellPropertyList), symbol]
  syntax #CellProperties ::= "" [klabel(#cellPropertyListTerminator), symbol]
  syntax #CellName ::= r"[a-zA-Z][a-zA-Z0-9\\-]*" [prec(1), token]
  syntax #CellName ::= #UpperId [token]
  syntax #CellName ::= #LowerId [token]
endmodule


module DEFAULT-LAYOUT [org.kframework.attributes.Location(Location(504,1,508,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#Layout" "(" K ")" [function, predicate(#Layout)]
  syntax #Layout ::= r"(\\/\\/[^\\n\\r]*)"
  syntax #Layout ::= r"(\\/\\*([^\\*]|(\\*+([^\\*\\/])))*\\*+\\/)"
  syntax #Layout ::= r"([\\ \\n\\r\\t])"
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module DOMAINS [org.kframework.attributes.Location(Location(47,1,58,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports SET
  imports MAP
  imports LIST
  imports K-IO
  imports INT
  imports ID
  imports DOMAINS-SYNTAX
  imports BOOL
  imports BASIC-K
endmodule


module DOMAINS-SYNTAX [org.kframework.attributes.Location(Location(39,1,45,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  imports STRING-SYNTAX
  imports SORT-K
  imports ID-SYNTAX
  imports BOOL-SYNTAX
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(1159,1,1164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Float
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Float [hook(FLOAT.Float), org.kframework.attributes.Location(Location(1160,3,1160,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1), token]
  syntax Float ::= "project:Float" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isFloat" "(" K ")" [function, predicate(Float)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Float`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module FLOAT-SYNTAX [org.kframework.attributes.Location(Location(1159,1,1164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Float
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Float [hook(FLOAT.Float), org.kframework.attributes.Location(Location(1160,3,1160,34)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Float ::= r"[\\+-]?Infinity([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"NaN([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(3), token]
  syntax Float ::= r"([\\+-]?[0-9]+(\\.[0-9]*)?|\\.[0-9]+)([eE][\\+-]?[0-9]+)?([fFdD]|([pP][0-9]+[xX][0-9]+))?" [prec(1), token]
  syntax Float ::= "project:Float" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isFloat" "(" K ")" [function, predicate(Float)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Float`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID [org.kframework.attributes.Location(Location(1987,1,1992,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports ID-COMMON
  rule `freshId(_)_ID-COMMON_Id_Int`(I)=>`String2Id(_)_ID-COMMON_Id_String`(`_+String__STRING-COMMON_String_String_String`(#token("\"_\"","String"),`Int2String(_)_STRING-COMMON_String_Int`(I))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3965c8e65257ebae926d601fa8ac672d34e4c211d73ba594c571c6bc5960f3de), contentStartColumn(8), contentStartLine(1991), org.kframework.attributes.Location(Location(1991,8,1991,62)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module ID-COMMON [org.kframework.attributes.Location(Location(1978,1,1985,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports ID-SYNTAX
  syntax String ::= "Id2String" "(" Id ")" [function, functional, hook(STRING.token2string), klabel(Id2String)]
  syntax Id ::= "freshId" "(" Int ")" [freshGenerator, function, functional, klabel(freshId)]
  syntax Id ::= "String2Id" "(" String ")" [function, functional, hook(STRING.string2token), klabel(String2Id)]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(1974,1,1976,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Id
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Id [org.kframework.attributes.Location(Location(1975,3,1975,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID-SYNTAX [org.kframework.attributes.Location(Location(1974,1,1976,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Id
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Id [org.kframework.attributes.Location(Location(1975,3,1975,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module ID-SYNTAX-PROGRAM-PARSING [org.kframework.attributes.Location(Location(1967,1,1972,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BUILTIN-ID-TOKENS
  syntax KItem ::= Id
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K
  syntax Id ::= r"(?<![A-Za-z0-9\\_])[A-Za-z\\_][A-Za-z0-9\\_]*" [prec(1), token]
  syntax Id ::= #UpperId [token]
  syntax Id ::= #LowerId [token]
  syntax Id ::= "project:Id" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isId" "(" K ")" [function, predicate(Id)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Id`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module INT [org.kframework.attributes.Location(Location(1094,1,1124,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL
  imports INT-KORE
  imports INT-COMMON
  syntax K ::= "srandInt" "(" Int ")" [function, hook(INT.srand), impure, klabel(srandInt)]
  syntax Int ::= "randInt" "(" Int ")" [function, hook(INT.rand), impure, klabel(randInt)]
  syntax Int ::= "freshInt" "(" Int ")" [freshGenerator, function, functional, klabel(freshInt)]
  rule `signExtendBitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_-Int_`(`_modInt_`(`_+Int_`(`bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))),`_<<Int_`(#token("1","Int"),LEN)),`_<<Int_`(#token("1","Int"),`_-Int_`(LEN,#token("1","Int")))) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(3b67f4bf2235fc46fc94b1d10e936100ea3fc4f2dbaa4e4a77593e8385f5004f), contentStartColumn(8), contentStartLine(1103), org.kframework.attributes.Location(Location(1103,8,1103,164)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I2 requires `_>=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(e1effeabf96bb3a3beffd5b679ad5df95c4f8bbf42872b0793331e52a8470fb3), contentStartColumn(8), contentStartLine(1114), org.kframework.attributes.Location(Location(1114,8,1114,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `minInt(_,_)_INT-COMMON_Int_Int_Int`(I1,I2)=>I1 requires `_<=Int_`(I1,I2) ensures #token("true","Bool") [UNIQUE_ID(fb09b6acc4366cb77203e07c4efe8a9cf304e1bac9fb0664deea05d3eb9a80c6), contentStartColumn(8), contentStartLine(1113), org.kframework.attributes.Location(Location(1113,8,1113,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `freshInt(_)_INT_Int_Int`(I)=>I requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cf2cb8f038b4bdc4edb1334a3b8ced9cd296a7af43f0a1916e082a4e1aefa08b), contentStartColumn(8), contentStartLine(1120), org.kframework.attributes.Location(Location(1120,8,1120,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `bitRangeInt(_,_,_)_INT-COMMON_Int_Int_Int_Int`(I,IDX,LEN)=>`_modInt_`(`_>>Int_`(I,IDX),`_<<Int_`(#token("1","Int"),LEN)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(147fc15c2ec6c36de1a9c0cad6212b8acd8b224f21c0aeabd36726e9c8a06119), contentStartColumn(8), contentStartLine(1101), org.kframework.attributes.Location(Location(1101,8,1101,85)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_modInt_`(I1,I2)=>`_%Int_`(`_+Int_`(`_%Int_`(I1,`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)),`absInt(_)_INT-COMMON_Int_Int`(I2)) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(adfacb58b0678a49f66186954229939a953c9849d5b08edc8f887c0d7514b2c6), concrete, contentStartColumn(5), contentStartLine(1108), org.kframework.attributes.Location(Location(1108,5,1111,23)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]), simplification]
  rule `_dividesInt__INT-COMMON_Bool_Int_Int`(I1,I2)=>`_==Int_`(`_%Int_`(I2,I1),#token("0","Int")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(fd8facae0061fe5bc5c406f7ad2ed5d8d21960bf1118c9b240451253064dadb5), contentStartColumn(8), contentStartLine(1117), org.kframework.attributes.Location(Location(1117,8,1117,58)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_divInt_`(I1,I2)=>`_/Int_`(`_-Int_`(I1,`_modInt_`(I1,I2)),I2) requires `_=/=Int_`(I2,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(83dcf9bc8c69f131715bc7a92d06c99b9a2b5f4c4fdafb69e6fdb2f1822712d4), contentStartColumn(8), contentStartLine(1105), org.kframework.attributes.Location(Location(1105,8,1106,23)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `_=/=Int_`(I1,I2)=>`notBool_`(`_==Int_`(I1,I2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4de6e05b11cdbed7ef5cb4c952127924661af4744c1e495370e1c8a962ba7be3), contentStartColumn(8), contentStartLine(1116), org.kframework.attributes.Location(Location(1116,8,1116,53)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module INT-COMMON [org.kframework.attributes.Location(Location(897,1,1029,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports BOOL
  syntax priority ~Int_ > _^Int_ _^%Int__ > _divInt_ _%Int_ _/Int_ _*Int_ _modInt_ > _+Int_ _-Int_ > _>>Int_ _<<Int_ > _&Int_ > _xorInt_ > _|Int_
  syntax associativity left _|Int_
  syntax associativity left _xorInt_
  syntax associativity left _modInt_
  syntax associativity left _divInt_ _%Int_ _/Int_ _*Int_ _modInt_
  syntax associativity left _divInt_
  syntax associativity left _^Int_ _^%Int__
  syntax associativity left _^Int_
  syntax associativity left _^%Int__
  syntax associativity left _>Int_
  syntax associativity left _>>Int_ _<<Int_
  syntax associativity left _>>Int_
  syntax associativity left _>=Int_
  syntax associativity left _==Int_
  syntax associativity left _=/=Int_
  syntax associativity left _<Int_
  syntax associativity left _<=Int_
  syntax associativity left _<<Int_
  syntax associativity left _/Int_
  syntax associativity left _-Int_
  syntax associativity left _+Int_ _-Int_
  syntax associativity left _+Int_
  syntax associativity left _*Int_
  syntax associativity left _&Int_
  syntax associativity left _%Int_
  syntax Int ::= Int "|Int" Int [function, functional, hook(INT.or), klabel(_|Int_), latex({#1}\mathrel{|_{\scriptstyle\it Int}}{#2}), left, smtlib(orInt), symbol]
  syntax Int ::= Int "xorInt" Int [function, functional, hook(INT.xor), klabel(_xorInt_), latex({#1}\mathrel{\oplus_{\scriptstyle\it Int}}{#2}), left, smtlib(xorInt), symbol]
  syntax Int ::= Int "modInt" Int [function, hook(INT.emod), klabel(_modInt_), left, smt-hook(mod), symbol]
  syntax Int ::= Int "divInt" Int [function, hook(INT.ediv), klabel(_divInt_), left, smt-hook(div), symbol]
  syntax Int ::= Int "^Int" Int [function, hook(INT.pow), klabel(_^Int_), latex({#1}\mathrel{{\char`\^}_{\!\scriptstyle\it Int}}{#2}), left, smt-hook(^), symbol]
  syntax Int ::= Int "^%Int" Int Int [function, hook(INT.powmod), klabel(_^%Int__), left, smt-hook((mod (^ #1 #2) #3)), symbol]
  syntax Int ::= Int ">>Int" Int [function, hook(INT.shr), klabel(_>>Int_), latex({#1}\mathrel{\gg_{\scriptstyle\it Int}}{#2}), left, smtlib(shrInt), symbol]
  syntax Int ::= Int "<<Int" Int [function, hook(INT.shl), klabel(_<<Int_), latex({#1}\mathrel{\ll_{\scriptstyle\it Int}}{#2}), left, smtlib(shlInt), symbol]
  syntax Int ::= Int "/Int" Int [function, hook(INT.tdiv), klabel(_/Int_), latex({#1}\mathrel{\div_{\scriptstyle\it Int}}{#2}), left, smt-hook(div), symbol]
  syntax Int ::= Int "-Int" Int [function, functional, hook(INT.sub), klabel(_-Int_), latex({#1}\mathrel{-_{\scriptstyle\it Int}}{#2}), left, smt-hook(-), symbol]
  syntax Int ::= Int "+Int" Int [function, functional, hook(INT.add), klabel(_+Int_), latex({#1}\mathrel{+_{\scriptstyle\it Int}}{#2}), left, smt-hook(+), symbol]
  syntax Int ::= Int "*Int" Int [function, functional, hook(INT.mul), klabel(_*Int_), latex({#1}\mathrel{\ast_{\scriptstyle\it Int}}{#2}), left, smt-hook(*), symbol]
  syntax Int ::= Int "&Int" Int [function, functional, hook(INT.and), klabel(_&Int_), latex({#1}\mathrel{\&_{\scriptstyle\it Int}}{#2}), left, smtlib(andInt), symbol]
  syntax Int ::= Int "%Int" Int [function, hook(INT.tmod), klabel(_%Int_), latex({#1}\mathrel{\%_{\scriptstyle\it Int}}{#2}), left, smt-hook(mod), symbol]
  syntax Int ::= "~Int" Int [function, functional, hook(INT.not), klabel(~Int_), latex(\mathop{\sim_{\scriptstyle\it Int}}{#1}), smtlib(notInt), symbol]
  syntax Int ::= "signExtendBitRangeInt" "(" Int "," Int "," Int ")" [function, hook(INT.signExtendBitRange), klabel(signExtendBitRangeInt)]
  syntax Int ::= "minInt" "(" Int "," Int ")" [function, functional, hook(INT.min), smt-hook((ite (< #1 #2) #1 #2))]
  syntax Int ::= "maxInt" "(" Int "," Int ")" [function, functional, hook(INT.max), smt-hook((ite (< #1 #2) #2 #1))]
  syntax Int ::= "log2Int" "(" Int ")" [function, hook(INT.log2), klabel(log2Int)]
  syntax Int ::= "bitRangeInt" "(" Int "," Int "," Int ")" [function, hook(INT.bitRange), klabel(bitRangeInt)]
  syntax Int ::= "absInt" "(" Int ")" [function, functional, hook(INT.abs), klabel(absInt), smt-hook((ite (< #1 0) (- 0 #1) #1))]
  syntax Bool ::= Int "dividesInt" Int [function]
  syntax Bool ::= Int ">Int" Int [function, functional, hook(INT.gt), klabel(_>Int_), latex({#1}\mathrel{>_{\scriptstyle\it Int}}{#2}), left, smt-hook(>), symbol]
  syntax Bool ::= Int ">=Int" Int [function, functional, hook(INT.ge), klabel(_>=Int_), latex({#1}\mathrel{\geq_{\scriptstyle\it Int}}{#2}), left, smt-hook(>=), symbol]
  syntax Bool ::= Int "==Int" Int [function, functional, hook(INT.eq), klabel(_==Int_), latex({#1}\mathrel{{=}{=}_{\scriptstyle\it Int}}{#2}), left, smt-hook(=), symbol]
  syntax Bool ::= Int "=/=Int" Int [function, functional, hook(INT.ne), klabel(_=/=Int_), latex({#1}\mathrel{{=}{/}{=}_{\scriptstyle\it Int}}{#2}), left, smt-hook(distinct), symbol]
  syntax Bool ::= Int "<Int" Int [function, functional, hook(INT.lt), klabel(_<Int_), latex({#1}\mathrel{<_{\scriptstyle\it Int}}{#2}), left, smt-hook(<), symbol]
  syntax Bool ::= Int "<=Int" Int [function, functional, hook(INT.le), klabel(_<=Int_), latex({#1}\mathrel{\leq_{\scriptstyle\it Int}}{#2}), left, smt-hook(<=), symbol]
endmodule


module INT-KORE [kore, org.kframework.attributes.Location(Location(1086,1,1092,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL
  imports INT-COMMON
  rule `_==K_`(I1,I2)=>`_==Int_`(I1,I2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8bf41fa14e6cef57ebcd77d165461911b0f45874319eafd20a311466ff77ac6f), contentStartColumn(8), contentStartLine(1090), org.kframework.attributes.Location(Location(1090,8,1090,40)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(892,1,895,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  syntax K
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2), prefer, token]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module INT-SYNTAX [org.kframework.attributes.Location(Location(892,1,895,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports UNSIGNED-INT-SYNTAX
  syntax K
  syntax Int ::= r"[\\+-]?[0-9]+" [prec(2), prefer, token]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module K [org.kframework.attributes.Location(Location(447,1,475,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES
  imports REQUIRES-ENSURES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports KREWRITE
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
  syntax {Sort} Sort ::= Sort "#as" Sort [klabel(#KAs), symbol]
  syntax {Sort} Sort ::= "#fun" "(" Sort ")" "(" Sort ")" [klabel(#fun2), prefer, symbol]
  syntax {Sort1, Sort2} Sort1 ::= "#fun" "(" Sort2 "=>" Sort1 ")" "(" Sort2 ")" [klabel(#fun3), symbol]
  syntax associativity left _:=K_ _:/=K_
  syntax Bool ::= K ":=K" K [equalEqualK, function, functional, klabel(_:=K_), symbol]
  syntax Bool ::= K ":/=K" K [function, functional, klabel(_:/=K_), notEqualEqualK, symbol]
endmodule


module K-AMBIGUITIES [org.kframework.attributes.Location(Location(540,1,544,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax {Sort} Sort ::= "amb" "(" Sort "," Sort ")" [klabel(amb), symbol]
endmodule


module K-BOTTOM-SORT [org.kframework.attributes.Location(Location(362,1,366,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  syntax {Sort} Sort ::= KBott
  syntax KItem ::= KBott
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module K-EQUAL [org.kframework.attributes.Location(Location(2046,1,2057,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX
  imports K-EQUAL-KORE
  imports BOOL
  rule `_=/=K_`(K1,K2)=>`notBool_`(`_==K_`(K1,K2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(bccaba7335e4cd77501a0667f2f7b3eb4a2105d5f60d804915dd4b1b08902c0c), contentStartColumn(8), contentStartLine(2052), org.kframework.attributes.Location(Location(2052,8,2052,45)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(C,_0,B2)=>B2 requires `notBool_`(C) ensures #token("true","Bool") [UNIQUE_ID(651bff3fa53d464ac7dd7aa77e1ef6071e14c959eb6df97baa325e2ad300daaa), contentStartColumn(8), contentStartLine(2055), org.kframework.attributes.Location(Location(2055,8,2055,67)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(C,B1,_0)=>B1 requires C ensures #token("true","Bool") [UNIQUE_ID(2b32069ac3f589174502fa507ebc88fab7c902854c0a9baa8ab09beb551232e2), contentStartColumn(8), contentStartLine(2054), org.kframework.attributes.Location(Location(2054,8,2054,59)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
endmodule


module K-EQUAL-KORE [kore, org.kframework.attributes.Location(Location(2030,1,2036,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports K-EQUAL-SYNTAX
  imports BOOL
  rule `_==K_`(K1,K2)=>`_==Bool_`(K1,K2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(51ca403f7048793055685a9e3a051e86807f14b2d4901ae81d0b4eedff7b1d77), contentStartColumn(8), contentStartLine(2034), org.kframework.attributes.Location(Location(2034,8,2034,43)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module K-EQUAL-SYNTAX [org.kframework.attributes.Location(Location(2016,1,2028,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BOOL
  imports BASIC-K
  syntax {Sort} Sort ::= "#if" Bool "#then" Sort "#else" Sort "#fi" [function, functional, hook(KEQUAL.ite), smt-hook(ite)]
  syntax priority _:=K_ _=/=K_ _:/=K_ _==K_ > weakAlwaysFinally #And _orElseBool_ weakExistsFinally _orBool_ #Implies _andThenBool_ _impliesBool_ #Floor #Exists #Ceil _andBool_ #Forall #Not #Or notBool_ #AG #Equals _xorBool_
  syntax associativity left _=/=K_ _==K_
  syntax Bool ::= K "==K" K [equalEqualK, function, functional, hook(KEQUAL.eq), klabel(_==K_), latex({#1}\mathrel{=_K}{#2}), smt-hook(=), symbol]
  syntax Bool ::= K "=/=K" K [function, functional, hook(KEQUAL.ne), klabel(_=/=K_), latex({#1}\mathrel{\neq_K}{#2}), notEqualEqualK, smt-hook(distinct), symbol]
endmodule


module K-IO [org.kframework.attributes.Location(Location(2129,1,2393,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports LIST
  syntax String ::= "path" "(" IOFile ")" [function]
  syntax Stream ::= "project:Stream" "(" K ")" [function, projection]
  syntax Stream ::= "#buffer" "(" K ")" [klabel(#buffer)]
  syntax KItem ::= Stream
  syntax KItem ::= IOString
  syntax KItem ::= IOInt
  syntax KItem ::= IOFile
  syntax KItem ::= IOError
  syntax KItem ::= "#systemResult" "(" Int "," String "," String ")" [klabel(#systemResult), symbol]
  syntax KItem ::= "#system" "(" String ")" [function, hook(IO.system), impure, klabel(#system)]
  syntax K ::= "#write" "(" Int "," String ")" [function, hook(IO.write), impure]
  syntax K ::= "#unlock" "(" Int "," Int ")" [function, hook(IO.unlock), impure]
  syntax K ::= "#shutdownWrite" "(" Int ")" [function, hook(IO.shutdownWrite), impure]
  syntax K ::= "#seekEnd" "(" Int "," Int ")" [function, hook(IO.seekEnd), impure]
  syntax K ::= "#seek" "(" Int "," Int ")" [function, hook(IO.seek), impure]
  syntax K ::= "#remove" "(" String ")" [function, functional, hook(IO.remove), impure, klabel(#remove)]
  syntax K ::= "#putc" "(" Int "," Int ")" [function, hook(IO.putc), impure]
  syntax K ::= "#logToFile" "(" String "," String ")" [function, functional, hook(IO.log), impure, klabel(#logToFile), returnsUnit, symbol]
  syntax K ::= "#lock" "(" Int "," Int ")" [function, hook(IO.lock), impure]
  syntax K ::= "#close" "(" Int ")" [function, hook(IO.close), impure]
  syntax K
  syntax Int ::= "fd" "(" IOFile ")" [function]
  syntax Int ::= "errno" "(" IOError ")" [function]
  syntax Int ::= "#time" "(" ")" [function, hook(IO.time), impure]
  syntax Int ::= "#stdout" [function, functional]
  syntax Int ::= "#stdin" [function, functional]
  syntax Int ::= "#stderr" [function, functional]
  syntax IOString ::= String
  syntax IOString ::= IOError
  syntax IOString ::= "project:IOString" "(" K ")" [function, projection]
  syntax IOString ::= "#read" "(" Int "," Int ")" [function, hook(IO.read), impure]
  syntax IOInt ::= Int
  syntax IOInt ::= IOError
  syntax IOInt ::= "project:IOInt" "(" K ")" [function, projection]
  syntax IOInt ::= "#tell" "(" Int ")" [function, hook(IO.tell), impure]
  syntax IOInt ::= "#open" "(" String "," String ")" [function, hook(IO.open), impure]
  syntax IOInt ::= "#open" "(" String ")" [function]
  syntax IOInt ::= "#getc" "(" Int ")" [function, hook(IO.getc), impure]
  syntax IOInt ::= "#accept" "(" Int ")" [function, hook(IO.accept), impure]
  syntax IOFile ::= IOError
  syntax IOFile ::= "project:IOFile" "(" K ")" [function, projection]
  syntax IOFile ::= "#tempFile" "(" String "," Int ")" [klabel(#tempFile), symbol]
  syntax IOFile ::= "#mkstemp" "(" String ")" [function, hook(IO.mkstemp), impure, klabel(#mkstemp)]
  syntax IOError ::= "project:IOError" "(" K ")" [function, projection]
  syntax IOError ::= "#unknownIOError" "(" Int ")" [klabel(#unknownIOError), symbol]
  syntax IOError ::= "#EXDEV" [klabel(#EXDEV), symbol]
  syntax IOError ::= "#EWOULDBLOCK" [klabel(#EWOULDBLOCK), symbol]
  syntax IOError ::= "#ETOOMANYREFS" [klabel(#ETOOMANYREFS), symbol]
  syntax IOError ::= "#ETIMEDOUT" [klabel(#ETIMEDOUT), symbol]
  syntax IOError ::= "#ESRCH" [klabel(#ESRCH), symbol]
  syntax IOError ::= "#ESPIPE" [klabel(#ESPIPE), symbol]
  syntax IOError ::= "#ESOCKTNOSUPPORT" [klabel(#ESOCKTNOSUPPORT), symbol]
  syntax IOError ::= "#ESHUTDOWN" [klabel(#ESHUTDOWN), symbol]
  syntax IOError ::= "#EROFS" [klabel(#EROFS), symbol]
  syntax IOError ::= "#ERANGE" [klabel(#ERANGE), symbol]
  syntax IOError ::= "#EPROTOTYPE" [klabel(#EPROTOTYPE), symbol]
  syntax IOError ::= "#EPROTONOSUPPORT" [klabel(#EPROTONOSUPPORT), symbol]
  syntax IOError ::= "#EPIPE" [klabel(#EPIPE), symbol]
  syntax IOError ::= "#EPFNOSUPPORT" [klabel(#EPFNOSUPPORT), symbol]
  syntax IOError ::= "#EPERM" [klabel(#EPERM), symbol]
  syntax IOError ::= "#EOVERFLOW" [klabel(#EOVERFLOW), symbol]
  syntax IOError ::= "#EOPNOTSUPP" [klabel(#EOPNOTSUPP), symbol]
  syntax IOError ::= "#EOF" [klabel(#EOF), symbol]
  syntax IOError ::= "#ENXIO" [klabel(#ENXIO), symbol]
  syntax IOError ::= "#ENOTTY" [klabel(#ENOTTY), symbol]
  syntax IOError ::= "#ENOTSOCK" [klabel(#ENOTSOCK), symbol]
  syntax IOError ::= "#ENOTEMPTY" [klabel(#ENOTEMPTY), symbol]
  syntax IOError ::= "#ENOTDIR" [klabel(#ENOTDIR), symbol]
  syntax IOError ::= "#ENOTCONN" [klabel(#ENOTCONN), symbol]
  syntax IOError ::= "#ENOSYS" [klabel(#ENOSYS), symbol]
  syntax IOError ::= "#ENOSPC" [klabel(#ENOSPC), symbol]
  syntax IOError ::= "#ENOPROTOOPT" [klabel(#ENOPROTOOPT), symbol]
  syntax IOError ::= "#ENOMEM" [klabel(#ENOMEM), symbol]
  syntax IOError ::= "#ENOLCK" [klabel(#ENOLCK), symbol]
  syntax IOError ::= "#ENOEXEC" [klabel(#ENOEXEC), symbol]
  syntax IOError ::= "#ENOENT" [klabel(#ENOENT), symbol]
  syntax IOError ::= "#ENODEV" [klabel(#ENODEV), symbol]
  syntax IOError ::= "#ENOBUFS" [klabel(#ENOBUFS), symbol]
  syntax IOError ::= "#ENFILE" [klabel(#ENFILE), symbol]
  syntax IOError ::= "#ENETUNREACH" [klabel(#ENETUNREACH), symbol]
  syntax IOError ::= "#ENETRESET" [klabel(#ENETRESET), symbol]
  syntax IOError ::= "#ENETDOWN" [klabel(#ENETDOWN), symbol]
  syntax IOError ::= "#ENAMETOOLONG" [klabel(#ENAMETOOLONG), symbol]
  syntax IOError ::= "#EMSGSIZE" [klabel(#EMSGSIZE), symbol]
  syntax IOError ::= "#EMLINK" [klabel(#EMLINK), symbol]
  syntax IOError ::= "#EMFILE" [klabel(#EMFILE), symbol]
  syntax IOError ::= "#ELOOP" [klabel(#ELOOP), symbol]
  syntax IOError ::= "#EISDIR" [klabel(#EISDIR), symbol]
  syntax IOError ::= "#EISCONN" [klabel(#EISCONN), symbol]
  syntax IOError ::= "#EIO" [klabel(#EIO), symbol]
  syntax IOError ::= "#EINVAL" [klabel(#EINVAL), symbol]
  syntax IOError ::= "#EINTR" [klabel(#EINTR), symbol]
  syntax IOError ::= "#EINPROGRESS" [klabel(#EINPROGRESS), symbol]
  syntax IOError ::= "#EHOSTUNREACH" [klabel(#EHOSTUNREACH), symbol]
  syntax IOError ::= "#EHOSTDOWN" [klabel(#EHOSTDOWN), symbol]
  syntax IOError ::= "#EFBIG" [klabel(#EFBIG), symbol]
  syntax IOError ::= "#EFAULT" [klabel(#EFAULT), symbol]
  syntax IOError ::= "#EEXIST" [klabel(#EEXIST), symbol]
  syntax IOError ::= "#EDOM" [klabel(#EDOM), symbol]
  syntax IOError ::= "#EDESTADDRREQ" [klabel(#EDESTADDRREQ), symbol]
  syntax IOError ::= "#EDEADLK" [klabel(#EDEADLK), symbol]
  syntax IOError ::= "#ECONNRESET" [klabel(#ECONNRESET), symbol]
  syntax IOError ::= "#ECONNREFUSED" [klabel(#ECONNREFUSED), symbol]
  syntax IOError ::= "#ECONNABORTED" [klabel(#ECONNABORTED), symbol]
  syntax IOError ::= "#ECHILD" [klabel(#ECHILD), symbol]
  syntax IOError ::= "#EBUSY" [klabel(#EBUSY), symbol]
  syntax IOError ::= "#EBADF" [klabel(#EBADF), symbol]
  syntax IOError ::= "#EALREADY" [klabel(#EALREADY), symbol]
  syntax IOError ::= "#EAGAIN" [klabel(#EAGAIN), symbol]
  syntax IOError ::= "#EAFNOSUPPORT" [klabel(#EAFNOSUPPORT), symbol]
  syntax IOError ::= "#EADDRNOTAVAIL" [klabel(#EADDRNOTAVAIL), symbol]
  syntax IOError ::= "#EADDRINUSE" [klabel(#EADDRINUSE), symbol]
  syntax IOError ::= "#EACCES" [klabel(#EACCES), symbol]
  syntax IOError ::= "#E2BIG" [klabel(#E2BIG), symbol]
  syntax Bool ::= "isStream" "(" K ")" [function, predicate(Stream)]
  syntax Bool ::= "isIOString" "(" K ")" [function, predicate(IOString)]
  syntax Bool ::= "isIOInt" "(" K ")" [function, predicate(IOInt)]
  syntax Bool ::= "isIOFile" "(" K ")" [function, predicate(IOFile)]
  syntax Bool ::= "isIOError" "(" K ")" [function, predicate(IOError)]
  rule `project:Stream`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOString`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOInt`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOFile`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOError`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:#unknownIOError:errno`(#unknownIOError(K0))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  rule `project:#tempFile:path`(#tempFile(K0,K1))=>K0 requires #token("true","Bool") ensures #token("true","Bool") 
  rule `project:#tempFile:fd`(#tempFile(K0,K1))=>K1 requires #token("true","Bool") ensures #token("true","Bool") 
  rule `#stdout_K-IO_Int`(.KList)=>#token("1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4ad4f379ff9db687ff9dfd1b15052edbcd3342a2ed262ecdd38c769e177a592c), contentStartColumn(8), contentStartLine(2332), org.kframework.attributes.Location(Location(2332,8,2332,20)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#stdin_K-IO_Int`(.KList)=>#token("0","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(c7ffdc9908c28a954521816d680f4e5ec44a679c7231a8dd09d4700f50b6d8c3), contentStartColumn(8), contentStartLine(2331), org.kframework.attributes.Location(Location(2331,8,2331,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#stderr_K-IO_Int`(.KList)=>#token("2","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(75e0a8082acda4cf1e29caa6aaafb7f9a421e16421a41f2006943d6fab17a162), contentStartColumn(8), contentStartLine(2333), org.kframework.attributes.Location(Location(2333,8,2333,20)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `#open(_)_K-IO_IOInt_String`(S)=>`#open(_,_)_K-IO_IOInt_String_String`(S,#token("\"r+\"","String")) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(7ad2779cd54b9009119458217cae5138026cc4ff244e54c28e64db21100f63d9), contentStartColumn(8), contentStartLine(2236), org.kframework.attributes.Location(Location(2236,8,2236,48)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module K-LOCATIONS [org.kframework.attributes.Location(Location(557,1,564,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports STRING-SYNTAX
  imports INT-SYNTAX
  syntax {Sort} Sort ::= "#location" "(" Sort "," String "," Int "," Int "," Int "," Int ")" [format(%3), klabel(#location), symbol]
endmodule


module K-REFLECTION [org.kframework.attributes.Location(Location(2075,1,2096,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING
  imports BASIC-K
  syntax {Sort} Sort ::= "#parseKORE" "(" String ")" [function, hook(KREFLECTION.parseKORE), klabel(#parseKORE)]
  syntax {Sort} Sort ::= "#parseKAST" "(" String ")" [function, hook(KREFLECTION.parseKAST), klabel(#parseKAST)]
  syntax String ::= "#sort" "(" K ")" [function, hook(KREFLECTION.sort), klabel(#sort)]
  syntax List ::= "project:List" "(" K ")" [function, projection]
  syntax List ::= "#argv" "(" ")" [function, hook(KREFLECTION.argv), klabel(#argv)]
  syntax KItem ::= List
  syntax KItem ::= IOError
  syntax KItem ::= "getKLabel" "(" K ")" [function, hook(KREFLECTION.getKLabel), klabel(getKLabel)]
  syntax KItem ::= "#fresh" "(" String ")" [function, hook(KREFLECTION.fresh), impure, klabel(#fresh)]
  syntax K ::= "#getenv" "(" String ")" [function, hook(KREFLECTION.getenv), impure, klabel(#getenv)]
  syntax K ::= "#configuration" [function, hook(KREFLECTION.configuration), impure]
  syntax K
  syntax IOError ::= "project:IOError" "(" K ")" [function, projection]
  syntax IOError ::= "#noParse" "(" String ")" [klabel(#noParse), symbol]
  syntax Bool ::= "isList" "(" K ")" [function, predicate(List)]
  syntax Bool ::= "isIOError" "(" K ")" [function, predicate(IOError)]
  rule `project:List`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:IOError`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module K-SORT-LATTICE [org.kframework.attributes.Location(Location(368,1,371,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports K-TOP-SORT
  imports K-BOTTOM-SORT
endmodule


module K-TERM [org.kframework.attributes.Location(Location(478,1,486,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-PREDICATES
  imports RECORD-PRODUCTIONS
  imports KSEQ-SYMBOLIC
  imports KREWRITE
  imports K-SORT-LATTICE
  imports AUTO-FOLLOW
  imports AUTO-CASTS
endmodule


module K-TOP-SORT [org.kframework.attributes.Location(Location(356,1,360,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  syntax {Sort} KItem ::= Sort
  syntax KItem ::= KBott
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KAST [org.kframework.attributes.Location(Location(72,1,92,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-KBOTT
  imports KSTRING
  imports BUILTIN-ID-TOKENS
  imports BASIC-K
  syntax associativity left #KList
  syntax KList ::= KList "," KList [assoc, klabel(#KList), left, prefer, symbol, unit(#EmptyKList)]
  syntax KList ::= K
  syntax KList ::= ".KList" [klabel(#EmptyKList), symbol]
  syntax KList ::= ".::KList" [klabel(#EmptyKList), symbol]
  syntax KLabel ::= r"`(\\\\`|\\\\\\\\|[^`\\\\\\n\\r])+`" [token]
  syntax KLabel ::= r"(?<![a-zA-Z0-9])[#a-z][a-zA-Z0-9]*" [prec(1), token]
  syntax KLabel ::= #LowerId [token]
  syntax KItem ::= KBott
  syntax KBott ::= KLabel "(" KList ")" [klabel(#KApply), symbol]
  syntax KBott ::= "#token" "(" KString "," KString ")" [klabel(#KToken), symbol]
  syntax KBott ::= "#klabel" "(" KLabel ")" [klabel(#WrappedKLabel), symbol]
  syntax K
  syntax Bool ::= "isKList" "(" K ")" [function, predicate(KList)]
  syntax Bool ::= "isKLabel" "(" K ")" [function, predicate(KLabel)]
endmodule


module KCELLS [org.kframework.attributes.Location(Location(240,1,253,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KAST
  syntax associativity non-assoc #withConfig
  syntax associativity left #cells
  syntax KItem ::= Cell
  syntax KItem ::= Bag
  syntax K
  syntax Cell [org.kframework.attributes.Location(Location(243,3,243,13)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax Cell ::= "project:Cell" "(" K ")" [function, projection]
  syntax Bool ::= "isCell" "(" K ")" [function, predicate(Cell)]
  syntax Bool ::= "isBag" "(" K ")" [function, predicate(Bag)]
  syntax Bool ::= "is#RuleBody" "(" K ")" [function, predicate(#RuleBody)]
  syntax Bag ::= KBott
  syntax Bag ::= Cell
  syntax Bag ::= Bag Bag [assoc, klabel(#cells), left, symbol, unit(#cells)]
  syntax Bag ::= "project:Bag" "(" K ")" [function, projection]
  syntax Bag ::= ".Bag" [klabel(#cells), symbol]
  syntax Bag ::= ".::Bag" [klabel(#cells), symbol]
  syntax Bag ::= "(" Bag ")" [bracket, bracketLabel((_)_KCELLS_Bag_Bag)]
  syntax #RuleBody ::= "[" "[" K "]" "]" Bag [avoid, klabel(#withConfig), symbol]
  rule `project:Cell`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bag`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KREWRITE [org.kframework.attributes.Location(Location(440,1,444,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax {Sort} Sort ::= Sort "=>" Sort [klabel(#KRewrite), symbol]
  syntax priority #KRewrite > #withConfig
  syntax associativity non-assoc #KRewrite
endmodule


module KSEQ [org.kframework.attributes.Location(Location(96,1,105,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports KAST
  imports K-TOP-SORT
  syntax {Sort} Sort ::= "(" Sort ")" [applyPriority(1), bracket, bracketLabel((_)_KSEQ_Sort_Sort{Sort}), defaultBracket]
  syntax associativity left #KSequence
  syntax K ::= K "~>" K [assoc, klabel(#KSequence), left, symbol, unit(#EmptyK)]
  syntax K ::= ".K" [klabel(#EmptyK), symbol, unparseAvoid]
  syntax K ::= ".::K" [klabel(#EmptyK), symbol, unparseAvoid]
  syntax K ::= "." [klabel(#EmptyK), symbol]
endmodule


module KSEQ-SYMBOLIC [org.kframework.attributes.Location(Location(205,1,216,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports ML-SYNTAX
  imports KVARIABLE-SYNTAX
  imports KSEQ
  syntax KLabel ::= #KVariable
  syntax KConfigVar ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\$)([A-Z][A-Za-z0-9'_]*)" [token]
  syntax KBott ::= KConfigVar
  syntax KBott ::= #KVariable
  syntax #KVariable ::= r"(?<![A-Za-z0-9_\\$!\\?@])(\\!|\\?|@)?([A-Z][A-Za-z0-9'_]*|_|_[A-Z][A-Za-z0-9'_]*)" [prec(1), token]
  syntax #KVariable ::= #UpperId [token]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKString" "(" K ")" [function, predicate(KString)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKString" "(" K ")" [function, predicate(KString)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KSTRING [org.kframework.attributes.Location(Location(57,1,60,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KString ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKString" "(" K ")" [function, predicate(KString)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KVARIABLE-SYNTAX [org.kframework.attributes.Location(Location(200,1,202,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "is#KVariable" "(" K ")" [function, predicate(#KVariable)]
  syntax #KVariable [org.kframework.attributes.Location(Location(201,3,201,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module KVARIABLE-SYNTAX [org.kframework.attributes.Location(Location(200,1,202,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#KVariable" "(" K ")" [function, predicate(#KVariable)]
  syntax #KVariable [org.kframework.attributes.Location(Location(201,3,201,19)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module LANGUAGE-PARSING
  imports K-TERM
  imports ID-SYNTAX-PROGRAM-PARSING
  imports C-SYNTAX
  imports C
endmodule


module LIST [not-lr1, org.kframework.attributes.Location(Location(627,1,742,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports BASIC-K
  syntax associativity left _List_
  syntax List [hook(LIST.List), org.kframework.attributes.Location(Location(631,3,631,31)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax List ::= List List [assoc, element(ListItem), format(%1%n%2), function, functional, hook(LIST.concat), klabel(_List_), left, smtlib(smt_seq_concat), symbol, unit(.List)]
  syntax List ::= List "[" Int "<-" KItem "]" [function, hook(LIST.update), klabel(List:set)]
  syntax List ::= "updateList" "(" List "," Int "," List ")" [function, hook(LIST.updateAll), klabel(updateList)]
  syntax List ::= "range" "(" List "," Int "," Int ")" [function, hook(LIST.range), klabel(List:range), symbol]
  syntax List ::= "project:List" "(" K ")" [function, projection]
  syntax List ::= "makeList" "(" Int "," KItem ")" [function, hook(LIST.make), klabel(makeList)]
  syntax List ::= "fillList" "(" List "," Int "," Int "," KItem ")" [function, hook(LIST.fill), klabel(fillList)]
  syntax List ::= "ListItem" "(" KItem ")" [function, functional, hook(LIST.element), klabel(ListItem), smtlib(smt_seq_elem), symbol]
  syntax List ::= ".List" [function, functional, hook(LIST.unit), klabel(.List), latex(\dotCt{List}), smtlib(smt_seq_nil), symbol]
  syntax KItem ::= List "[" Int "]" [function, hook(LIST.get), klabel(List:get), symbol]
  syntax KItem ::= List
  syntax K
  syntax Int ::= "size" "(" List ")" [function, functional, hook(LIST.size), klabel(sizeList), smtlib(smt_seq_len)]
  syntax Bool ::= KItem "in" List [function, functional, hook(LIST.in), klabel(_inList_)]
  syntax Bool ::= "isList" "(" K ")" [function, predicate(List)]
  rule `project:List`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module MAP [org.kframework.attributes.Location(Location(221,1,413,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports SET
  imports LIST
  imports INT-SYNTAX
  imports BOOL-SYNTAX
  syntax priority _|->_ > .Map _Map_
  syntax associativity non-assoc _|->_
  syntax associativity left _Map_
  syntax Set ::= "keys" "(" Map ")" [function, functional, hook(MAP.keys), klabel(keys)]
  syntax Map [hook(MAP.Map), org.kframework.attributes.Location(Location(227,3,227,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Map ::= Map Map [assoc, comm, element(_|->_), format(%1%n%2), function, hook(MAP.concat), index(0), klabel(_Map_), left, symbol, unit(.Map)]
  syntax Map ::= Map "[" KItem "<-" KItem "]" [function, functional, hook(MAP.update), klabel(Map:update), prefer, symbol]
  syntax Map ::= Map "[" KItem "<-" "undef" "]" [function, functional, hook(MAP.remove), klabel(_[_<-undef]), symbol]
  syntax Map ::= Map "-Map" Map [function, functional, hook(MAP.difference), latex({#1}-_{\it Map}{#2})]
  syntax Map ::= KItem "|->" KItem [function, functional, hook(MAP.element), klabel(_|->_), latex({#1}\mapsto{#2}), symbol]
  syntax Map ::= "updateMap" "(" Map "," Map ")" [function, functional, hook(MAP.updateAll), klabel(updateMap)]
  syntax Map ::= "removeAll" "(" Map "," Set ")" [function, functional, hook(MAP.removeAll), klabel(removeAll)]
  syntax Map ::= "project:Map" "(" K ")" [function, projection]
  syntax Map ::= ".Map" [function, functional, hook(MAP.unit), klabel(.Map), latex(\dotCt{Map}), symbol]
  syntax List ::= "values" "(" Map ")" [function, hook(MAP.values), klabel(values)]
  syntax List ::= "keys_list" "(" Map ")" [function, hook(MAP.keys_list)]
  syntax KItem ::= Map "[" KItem "]" [function, hook(MAP.lookup), klabel(Map:lookup), symbol]
  syntax KItem ::= Map "[" KItem "]" "orDefault" KItem [function, functional, hook(MAP.lookupOrDefault), klabel(Map:lookupOrDefault)]
  syntax KItem ::= Map
  syntax KItem ::= "choice" "(" Map ")" [function, hook(MAP.choice), klabel(Map:choice)]
  syntax K
  syntax Int ::= "size" "(" Map ")" [function, functional, hook(MAP.size), klabel(sizeMap)]
  syntax Bool ::= Map "<=Map" Map [function, functional, hook(MAP.inclusion)]
  syntax Bool ::= KItem "in_keys" "(" Map ")" [function, functional, hook(MAP.in_keys)]
  syntax Bool ::= "isMap" "(" K ")" [function, predicate(Map)]
  rule `project:Map`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module MINT-SYNTAX [org.kframework.attributes.Location(Location(2584,1,2591,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax {Width} MInt{Width} ::= r"[\\+-]?[0-9]+[pP][0-9]+" [hook(MINT.literal), prec(2), token]
  syntax MInt{Width} [hook(MINT.MInt), org.kframework.attributes.Location(Location(2587,3,2587,46)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
endmodule


module ML-SYNTAX [org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax {Sort} Sort ::= Sort "#Or" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#Or), left, mlOp, symbol, unit(#Bottom)]
  syntax {Sort} Sort ::= Sort "#Implies" Sort [format(%i%1%d%n%2%n%i%3%d), klabel(#Implies), mlImplies, mlOp, symbol]
  syntax {Sort} Sort ::= Sort "#And" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#And), left, mlAnd, mlOp, symbol, unit(#Top)]
  syntax {Sort} Sort ::= "#wEF" "(" Sort ")" [klabel(weakExistsFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#wAF" "(" Sort ")" [klabel(weakAlwaysFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#True" [klabel(#Top), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Top" [klabel(#Top), mlUnary, symbol]
  syntax {Sort} Sort ::= "#Not" "(" Sort ")" [klabel(#Not), mlOp, mlUnary, symbol]
  syntax {Sort} Sort ::= "#False" [klabel(#Bottom), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Bottom" [klabel(#Bottom), mlUnary, symbol]
  syntax {Sort} Sort ::= "#AG" "(" Sort ")" [klabel(#AG), mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "{" Sort1 "#Equals" Sort1 "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5), klabel(#Equals), mlEquals, mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Forall" Sort1 "." Sort2 [klabel(#Forall), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Floor" "(" Sort1 ")" [klabel(#Floor), mlOp, mlUnary, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Exists" Sort1 "." Sort2 [klabel(#Exists), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Ceil" "(" Sort1 ")" [klabel(#Ceil), mlOp, mlUnary, symbol]
  syntax priority #Top #Floor #Ceil #Not #Bottom > #Equals > #And
  syntax priority #Implies > #Exists #Forall
  syntax priority #And > #Or > #Implies
  syntax associativity left #Or
  syntax associativity left #And
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module ML-SYNTAX [org.kframework.attributes.Location(Location(137,1,164,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax {Sort} Sort ::= Sort "#Or" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#Or), left, mlOp, symbol, unit(#Bottom)]
  syntax {Sort} Sort ::= Sort "#Implies" Sort [format(%i%1%d%n%2%n%i%3%d), klabel(#Implies), mlImplies, mlOp, symbol]
  syntax {Sort} Sort ::= Sort "#And" Sort [assoc, comm, format(%i%1%d%n%2%n%i%3%d), klabel(#And), left, mlAnd, mlOp, symbol, unit(#Top)]
  syntax {Sort} Sort ::= "#wEF" "(" Sort ")" [klabel(weakExistsFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#wAF" "(" Sort ")" [klabel(weakAlwaysFinally), mlOp, symbol]
  syntax {Sort} Sort ::= "#True" [klabel(#Top), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Top" [klabel(#Top), mlUnary, symbol]
  syntax {Sort} Sort ::= "#Not" "(" Sort ")" [klabel(#Not), mlOp, mlUnary, symbol]
  syntax {Sort} Sort ::= "#False" [klabel(#Bottom), mlUnary, symbol, unparseAvoid]
  syntax {Sort} Sort ::= "#Bottom" [klabel(#Bottom), mlUnary, symbol]
  syntax {Sort} Sort ::= "#AG" "(" Sort ")" [klabel(#AG), mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "{" Sort1 "#Equals" Sort1 "}" [format(%1%i%n%2%d%n%3%i%n%4%d%n%5), klabel(#Equals), mlEquals, mlOp, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Forall" Sort1 "." Sort2 [klabel(#Forall), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Floor" "(" Sort1 ")" [klabel(#Floor), mlOp, mlUnary, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Exists" Sort1 "." Sort2 [klabel(#Exists), mlBinder, mlOp, mlQuantifier, symbol]
  syntax {Sort1, Sort2} Sort2 ::= "#Ceil" "(" Sort1 ")" [klabel(#Ceil), mlOp, mlUnary, symbol]
  syntax priority #Top #Floor #Ceil #Not #Bottom > #Equals > #And
  syntax priority #Implies > #Exists #Forall
  syntax priority #And > #Or > #Implies
  syntax associativity left #Or
  syntax associativity left #And
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module PROGRAM-LISTS [org.kframework.attributes.Location(Location(396,1,408,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax K
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module RECORD-PRODUCTIONS [org.kframework.attributes.Location(Location(417,1,422,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module REQUIRES-ENSURES [org.kframework.attributes.Location(Location(334,1,345,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports BASIC-K
  syntax K
  syntax Bool ::= "is#RuleContent" "(" K ")" [function, predicate(#RuleContent)]
  syntax Bool ::= "is#RuleBody" "(" K ")" [function, predicate(#RuleBody)]
  syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol]
  syntax #RuleContent ::= #RuleBody "when" Bool [klabel(#ruleRequires), symbol]
  syntax #RuleContent ::= #RuleBody "when" Bool "ensures" Bool [klabel(#ruleRequiresEnsures), symbol]
  syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol]
  syntax #RuleContent ::= #RuleBody "requires" Bool "ensures" Bool [klabel(#ruleRequiresEnsures), symbol]
  syntax #RuleContent ::= #RuleBody "ensures" Bool [klabel(#ruleEnsures), symbol]
  syntax #RuleBody ::= K
endmodule


module RULE-CELLS [org.kframework.attributes.Location(Location(274,1,284,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports RULE-LISTS
  imports KCELLS
  syntax K
  syntax Bool ::= "is#OptionalDots" "(" K ")" [function, predicate(#OptionalDots)]
  syntax #OptionalDots ::= "..." [klabel(#dots), symbol]
  syntax #OptionalDots ::= "" [klabel(#noDots), symbol]
endmodule


module RULE-LISTS [org.kframework.attributes.Location(Location(410,1,415,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module RULE-TAG-SYNTAX [org.kframework.attributes.Location(Location(2794,1,2798,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports BUILTIN-ID-TOKENS
  syntax K
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  syntax Bool ::= "is#RuleTag" "(" K ")" [function, predicate(#RuleTag)]
  syntax #RuleTag ::= #LowerId [token]
endmodule


module SET [not-lr1, org.kframework.attributes.Location(Location(502,1,614,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports INT-SYNTAX
  imports BASIC-K
  syntax associativity left _|Set__SET_Set_Set_Set
  syntax associativity left _Set_
  syntax Set [hook(SET.Set), org.kframework.attributes.Location(Location(506,3,506,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Set ::= Set Set [assoc, comm, element(SetItem), format(%1%n%2), function, functional, hook(SET.concat), idem, klabel(_Set_), left, symbol, unit(.Set)]
  syntax Set ::= Set "|Set" Set [function, functional, hook(SET.union), left]
  syntax Set ::= Set "-Set" Set [function, functional, hook(SET.difference), klabel(Set:difference), latex({#1}-_{\it Set}{#2}), symbol]
  syntax Set ::= "project:Set" "(" K ")" [function, projection]
  syntax Set ::= "intersectSet" "(" Set "," Set ")" [function, functional, hook(SET.intersection), klabel(intersectSet)]
  syntax Set ::= "SetItem" "(" KItem ")" [function, functional, hook(SET.element), klabel(SetItem), symbol]
  syntax Set ::= ".Set" [function, functional, hook(SET.unit), klabel(.Set), latex(\dotCt{Set}), symbol]
  syntax KItem ::= Set
  syntax KItem ::= "choice" "(" Set ")" [function, hook(SET.choice), klabel(Set:choice)]
  syntax K
  syntax Int ::= "size" "(" Set ")" [function, functional, hook(SET.size), klabel(size)]
  syntax Bool ::= Set "<=Set" Set [function, functional, hook(SET.inclusion)]
  syntax Bool ::= KItem "in" Set [function, functional, hook(SET.in), klabel(Set:in), symbol]
  syntax Bool ::= "isSet" "(" K ")" [function, predicate(Set)]
  rule `project:Set`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `_|Set__SET_Set_Set_Set`(S1,S2)=>`_Set_`(S1,`Set:difference`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(e9a710d8d1ca5c799420161879cbbff926de45a5bddd820d646f51d43eb67e62), contentStartColumn(8), contentStartLine(555), org.kframework.attributes.Location(Location(555,8,555,45)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module SORT-BOOL [org.kframework.attributes.Location(Location(785,1,787,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool [hook(BOOL.Bool), org.kframework.attributes.Location(Location(786,3,786,31)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-BOOL [org.kframework.attributes.Location(Location(785,1,787,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool [hook(BOOL.Bool), org.kframework.attributes.Location(Location(786,3,786,31)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-K [org.kframework.attributes.Location(Location(26,1,28,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax KItem ::= Bool
  syntax K [hook(K.K), org.kframework.attributes.Location(Location(27,3,27,22)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax KBott [org.kframework.attributes.Location(Location(69,3,69,14)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K
  syntax Bool ::= "isKBott" "(" K ")" [function, predicate(KBott)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module SORT-KBOTT [org.kframework.attributes.Location(Location(67,1,70,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  imports SORT-K
  syntax KBott [org.kframework.attributes.Location(Location(69,3,69,14)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
  syntax K
  syntax Bool ::= "isKBott" "(" K ")" [function, predicate(KBott)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
endmodule


module SORT-PREDICATES [org.kframework.attributes.Location(Location(424,1,429,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/kast.md))]
endmodule


module STDIN-STREAM [org.kframework.attributes.Location(Location(2401,1,2495,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
endmodule


module STDOUT-STREAM [org.kframework.attributes.Location(Location(2497,1,2565,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
endmodule


module STRING [org.kframework.attributes.Location(Location(1595,1,1599,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-KORE
  imports STRING-COMMON
endmodule


module STRING-COMMON [org.kframework.attributes.Location(Location(1374,1,1577,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-SYNTAX
  imports K-EQUAL
  imports INT
  imports FLOAT-SYNTAX
  syntax associativity left _==String__STRING-COMMON_Bool_String_String
  syntax associativity left _=/=String__STRING-COMMON_Bool_String_String
  syntax associativity left _+String__STRING-COMMON_String_String_String
  syntax String ::= String "+String" String [function, functional, hook(STRING.concat), latex({#1}+_{\scriptstyle\it String}{#2}), left]
  syntax String ::= "substrString" "(" String "," Int "," Int ")" [function, functional, hook(STRING.substr), klabel(substrString)]
  syntax String ::= "replaceFirst" "(" String "," String "," String ")" [function, functional, hook(STRING.replaceFirst)]
  syntax String ::= "replaceAll" "(" String "," String "," String ")" [function, functional, hook(STRING.replaceAll)]
  syntax String ::= "replace" "(" String "," String "," String "," Int ")" [function, hook(STRING.replace)]
  syntax String ::= "newUUID" [function, hook(STRING.uuid), impure]
  syntax String ::= "directionalityChar" "(" String ")" [function, hook(STRING.directionality), klabel(directionalityChar)]
  syntax String ::= "chrChar" "(" Int ")" [function, hook(STRING.chr), klabel(chrChar)]
  syntax String ::= "categoryChar" "(" String ")" [function, hook(STRING.category), klabel(categoryChar)]
  syntax String ::= "Int2String" "(" Int ")" [function, functional, hook(STRING.int2string), klabel(Int2String)]
  syntax String ::= "Float2String" "(" Float "," String ")" [function, hook(STRING.floatFormat), klabel(FloatFormat)]
  syntax String ::= "Float2String" "(" Float ")" [function, functional, hook(STRING.float2string), klabel(Float2String)]
  syntax String ::= "Bool2String" "(" Bool ")" [function, functional, klabel(Bool2String)]
  syntax String ::= "Base2String" "(" Int "," Int ")" [function, hook(STRING.base2string), klabel(Base2String)]
  syntax Int ::= "rfindString" "(" String "," String "," Int ")" [function, hook(STRING.rfind), klabel(rfindString)]
  syntax Int ::= "rfindChar" "(" String "," String "," Int ")" [function, hook(STRING.rfindChar), klabel(rfindChar)]
  syntax Int ::= "ordChar" "(" String ")" [function, hook(STRING.ord), klabel(ordChar)]
  syntax Int ::= "lengthString" "(" String ")" [function, functional, hook(STRING.length), klabel(lengthString)]
  syntax Int ::= "findString" "(" String "," String "," Int ")" [function, hook(STRING.find), klabel(findString)]
  syntax Int ::= "findChar" "(" String "," String "," Int ")" [function, hook(STRING.findChar), klabel(findChar)]
  syntax Int ::= "countAllOccurrences" "(" String "," String ")" [function, functional, hook(STRING.countAllOccurrences)]
  syntax Int ::= "String2Int" "(" String ")" [function, hook(STRING.string2int), klabel(String2Int)]
  syntax Int ::= "String2Base" "(" String "," Int ")" [function, hook(STRING.string2base), klabel(String2Base)]
  syntax Float ::= "String2Float" "(" String ")" [function, hook(STRING.string2float), klabel(String2Float)]
  syntax Bool ::= String ">String" String [function, functional, hook(STRING.gt)]
  syntax Bool ::= String ">=String" String [function, functional, hook(STRING.ge)]
  syntax Bool ::= String "==String" String [function, functional, hook(STRING.eq), left]
  syntax Bool ::= String "=/=String" String [function, functional, hook(STRING.ne), left]
  syntax Bool ::= String "<String" String [function, functional, hook(STRING.lt)]
  syntax Bool ::= String "<=String" String [function, functional, hook(STRING.le)]
  syntax Bool ::= "String2Bool" "(" String ")" [function, klabel(String2Bool)]
  rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(23b9fa88124c547d94aed32124d1ccd1069732b059f4c8b430ab4617979690f6), contentStartColumn(8), contentStartLine(1556), org.kframework.attributes.Location(Location(1556,8,1556,33)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`maxInt(_,_)_INT-COMMON_Int_Int_Int`(`rfindString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`rfindChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(b7f740050d72a847424b022a9c8217325aba8a154a42831aa3c7a3b0727f3205), contentStartColumn(8), contentStartLine(1555), org.kframework.attributes.Location(Location(1555,8,1555,182)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,_0)=>Source requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(8fbd1c8efb9988236eddc95fc2af4a3e74f6ec94d696ee47209543fd0826dd34), contentStartColumn(8), contentStartLine(1566), org.kframework.attributes.Location(Location(1566,8,1567,57)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceFirst(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source))) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(e290042e5b5b2f620c0ca1871e708c3713c62b63b283e317bb7568e13968fe0c), contentStartColumn(8), contentStartLine(1563), org.kframework.attributes.Location(Location(1563,8,1565,66)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `replaceAll(_,_,_)_STRING-COMMON_String_String_String_String`(Source,ToReplace,Replacement)=>`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToReplace)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(262167183c3ec2e214d12bac6e639d7ac1a9f973582e16eca6c1af1da7ecc0a5), contentStartColumn(8), contentStartLine(1575), org.kframework.attributes.Location(Location(1575,8,1575,154)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,_0,_1,#token("0","Int"))=>Source requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(4367434b0f61c404f7a2e926426bd23874dd547de689c5d15089967fbab2b3d5), contentStartColumn(8), contentStartLine(1574), org.kframework.attributes.Location(Location(1574,8,1574,49)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(Source,ToReplace,Replacement,Count)=>`_+String__STRING-COMMON_String_String_String`(`_+String__STRING-COMMON_String_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,#token("0","Int"),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int"))),Replacement),`replace(_,_,_,_)_STRING-COMMON_String_String_String_String_Int`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToReplace,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToReplace)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToReplace,Replacement,`_-Int_`(Count,#token("1","Int")))) requires `_>Int_`(Count,#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(311b80d2cb12d368f230eba968464e1fc926bd57e304059b282b82af4d9626d9), contentStartColumn(8), contentStartLine(1570), org.kframework.attributes.Location(Location(1570,8,1573,30)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(_0,#token("\"\"","String"),_1)=>#token("-1","Int") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(5a6cf981f0ec2494854cd3e517b0cf645a1c9762c92a14849adfca9a6a553117), contentStartColumn(8), contentStartLine(1554), org.kframework.attributes.Location(Location(1554,8,1554,32)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,S2,I)=>`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(`_==Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),#token("-1","Int")),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),`#if_#then_#else_#fi_K-EQUAL-SYNTAX_Sort_Bool_Sort_Sort`(`_==Int_`(`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I),#token("-1","Int")),`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`minInt(_,_)_INT-COMMON_Int_Int_Int`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("0","Int"),#token("1","Int")),I),`findChar(_,_,_)_STRING-COMMON_Int_String_String_Int`(S1,`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(S2,#token("1","Int"),`lengthString(_)_STRING-COMMON_Int_String`(S2)),I)))) requires `_=/=String__STRING-COMMON_Bool_String_String`(S2,#token("\"\"","String")) ensures #token("true","Bool") [UNIQUE_ID(9a3b7d1924363894c859ceb6bcec34fb944f01a5e0c90679d41b8430990b7295), contentStartColumn(8), contentStartLine(1553), org.kframework.attributes.Location(Location(1553,8,1553,431)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>`_+Int_`(#token("1","Int"),`countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(`substrString(_,_,_)_STRING-COMMON_String_String_Int_Int`(Source,`_+Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),`lengthString(_)_STRING-COMMON_Int_String`(ToCount)),`lengthString(_)_STRING-COMMON_Int_String`(Source)),ToCount)) requires `_>=Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(628cff029a6d79e4c99999c0309f91ab8cb12f0ba549bb3faa850f96304c970e), contentStartColumn(8), contentStartLine(1560), org.kframework.attributes.Location(Location(1560,8,1561,60)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `countAllOccurrences(_,_)_STRING-COMMON_Int_String_String`(Source,ToCount)=>#token("0","Int") requires `_<Int_`(`findString(_,_,_)_STRING-COMMON_Int_String_String_Int`(Source,ToCount,#token("0","Int")),#token("0","Int")) ensures #token("true","Bool") [UNIQUE_ID(1c726cd81629c2e5f411539a7f9b4d297e8600e5d71a5d235d287e3001f3ec84), contentStartColumn(8), contentStartLine(1558), org.kframework.attributes.Location(Location(1558,8,1559,59)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody "requires" Bool [klabel(#ruleRequires), symbol])]
  rule `_>String__STRING-COMMON_Bool_String_String`(S1,S2)=>`_<String__STRING-COMMON_Bool_String_String`(S2,S1) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(8e5353c0a58491f8613ad7a35d0833206c342df0c91773e42485e52f4dad0cd0), contentStartColumn(8), contentStartLine(1550), org.kframework.attributes.Location(Location(1550,8,1550,52)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_>=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b376ffb0925555ed27696d73fc8fe43306e2005e4cf6ad819e860958992f9f17), contentStartColumn(8), contentStartLine(1551), org.kframework.attributes.Location(Location(1551,8,1551,63)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_=/=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_==String__STRING-COMMON_Bool_String_String`(S1,S2)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(f390a9b650f3de0e3a93773a46e65aae3decdeb2a10906058f204f031681c9b7), contentStartColumn(8), contentStartLine(1529), org.kframework.attributes.Location(Location(1529,8,1529,65)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `_<=String__STRING-COMMON_Bool_String_String`(S1,S2)=>`notBool_`(`_<String__STRING-COMMON_Bool_String_String`(S2,S1)) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(9e50fb4dcba1212ee863c170298cb8b555f39fb3b4bcb649f3d1d8e321accc80), contentStartColumn(8), contentStartLine(1549), org.kframework.attributes.Location(Location(1549,8,1549,63)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"true\"","String"))=>#token("true","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(27a5d1d7872d61f82556a4e44bda13846dde7dc2d9c54304d7858de9a8b9d6b8), contentStartColumn(8), contentStartLine(1455), org.kframework.attributes.Location(Location(1455,8,1455,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `String2Bool(_)_STRING-COMMON_Bool_String`(#token("\"false\"","String"))=>#token("false","Bool") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(b73b5c8e0ae45020f2b9b8170d366691fee01a63763b79653a2075703ec4e835), contentStartColumn(8), contentStartLine(1456), org.kframework.attributes.Location(Location(1456,8,1456,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("true","Bool"))=>#token("\"true\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(365df37345a5a44ac061f8741369c7bd74a49f0f6e7b716be0374806dd1add3d), contentStartColumn(8), contentStartLine(1449), org.kframework.attributes.Location(Location(1449,8,1449,36)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
  rule `Bool2String(_)_STRING-COMMON_String_Bool`(#token("false","Bool"))=>#token("\"false\"","String") requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(cca4780e4e7660055f781b9643f3125234a0f4f08ba76cacf8e5a18fe7fc999f), contentStartColumn(8), contentStartLine(1450), org.kframework.attributes.Location(Location(1450,8,1450,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module STRING-KORE [kore, org.kframework.attributes.Location(Location(1587,1,1593,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  imports STRING-COMMON
  imports K-EQUAL
  rule `_==K_`(S1,S2)=>`_==String__STRING-COMMON_Bool_String_String`(S1,S2) requires #token("true","Bool") ensures #token("true","Bool") [UNIQUE_ID(512288fc69c52cbd01cf38881d419b391f66a3d428beddb746e0012a9f880325), contentStartColumn(8), contentStartLine(1591), org.kframework.attributes.Location(Location(1591,8,1591,49)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md)), org.kframework.definition.Production(syntax #RuleContent ::= #RuleBody [klabel(#ruleNoConditions), symbol])]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(1369,1,1372,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1370,3,1370,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax String ::= "project:String" "(" K ")" [function, projection]
  syntax KItem ::= String
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isString" "(" K ")" [function, predicate(String)]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:String`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(1369,1,1372,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1370,3,1370,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax String ::= "project:String" "(" K ")" [function, projection]
  syntax KItem ::= String
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isString" "(" K ")" [function, predicate(String)]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  rule `project:String`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module STRING-SYNTAX [org.kframework.attributes.Location(Location(1369,1,1372,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String [hook(STRING.String), org.kframework.attributes.Location(Location(1370,3,1370,37)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax String ::= r"[\\\"](([^\\\"\\n\\r\\\\])|([\\\\][nrtf\\\"\\\\])|([\\\\][x][0-9a-fA-F]{2})|([\\\\][u][0-9a-fA-F]{4})|([\\\\][U][0-9a-fA-F]{8}))*[\\\"]" [token]
  syntax String ::= "project:String" "(" K ")" [function, projection]
  syntax KItem ::= String
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isString" "(" K ")" [function, predicate(String)]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:String`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(887,1,890,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Int
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(888,3,888,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(887,1,890,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Int
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(888,3,888,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule


module UNSIGNED-INT-SYNTAX [org.kframework.attributes.Location(Location(887,1,890,9)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax KItem ::= Int
  syntax KItem ::= Bool
  syntax KItem ::= "project:KItem" "(" K ")" [function, projection]
  syntax K ::= "project:K" "(" K ")" [function, projection]
  syntax K
  syntax Int [hook(INT.Int), org.kframework.attributes.Location(Location(888,3,888,28)), org.kframework.attributes.Source(Source(/usr/include/kframework/builtin/domains.md))]
  syntax Int ::= r"[0-9]+" [prec(2), prefer, token]
  syntax Int ::= "project:Int" "(" K ")" [function, projection]
  syntax Bool ::= "project:Bool" "(" K ")" [function, projection]
  syntax Bool ::= "isKItem" "(" K ")" [function, predicate(KItem)]
  syntax Bool ::= "isK" "(" K ")" [function, predicate(K)]
  syntax Bool ::= "isInt" "(" K ")" [function, predicate(Int)]
  syntax Bool ::= "isBool" "(" K ")" [function, predicate(Bool)]
  rule `project:K`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:KItem`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Int`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
  rule `project:Bool`(K)=>K requires #token("true","Bool") ensures #token("true","Bool") [projection]
endmodule